[{"title":"词频统计","date":"2023-04-11T13:22:56.000Z","path":"词频统计/","content":"<p>毕业季了，遇到别人毕设需要用到python，友情帮助了一下，记录一下。</p>\n<p>大概目标是爬取上市公司年报，并进行关键词频率统计，爬取网站是巨潮资讯。<br>\n以下链接能获取到巨潮资讯A股公司的一些不要信息，如图所示，<span id=\"more\"></span><br>\n<a href=\"http://www.cninfo.com.cn/new/data/szse_stock.json\">http://www.cninfo.com.cn/new/data/szse_stock.json</a><br>\n<img src=\"/img/%E5%B7%A8%E6%BD%AE.png\" alt=\"\"></p>\n<p>还是直接上代码吧</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> os ,xlrd</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests,time,json</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> xlrd,os</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">req</span>(<span class=\"params\">stock,year,org_dict</span>):</span><br><span class=\"line\">    <span class=\"comment\"># post请求地址（巨潮资讯网的那个查询框实质为该地址）</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;http://www.cninfo.com.cn/new/hisAnnouncement/query&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 表单数据，需要在浏览器开发者模式中查看具体格式</span></span><br><span class=\"line\">    data  = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;pageNum&quot;</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;pageSize&quot;</span>:<span class=\"string\">&quot;30&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tabName&quot;</span>:<span class=\"string\">&quot;fulltext&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;stock&quot;</span>:stock + <span class=\"string\">&quot;,&quot;</span> + org_dict[stock] ,<span class=\"comment\"># 按照浏览器开发者模式中显示的参数格式构造参数</span></span><br><span class=\"line\">        <span class=\"string\">&quot;seDate&quot;</span>:<span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(year)+<span class=\"number\">1</span>)&#125;</span>-01-01~<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(year)+<span class=\"number\">1</span>)&#125;</span>-12-31&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;column&quot;</span>:<span class=\"string\">&quot;szse&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;category&quot;</span>:<span class=\"string\">&quot;category_ndbg_szsh&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;isHLtitle&quot;</span>: <span class=\"string\">&quot;true&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;sortName&quot;</span>:<span class=\"string\">&quot;time&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;sortType&quot;</span>: <span class=\"string\">&quot;desc&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 请求头</span></span><br><span class=\"line\">    headers =  &#123;<span class=\"string\">&quot;Content-Length&quot;</span>: <span class=\"string\">&quot;201&quot;</span>,<span class=\"string\">&quot;Content-Type&quot;</span>:<span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">    req = requests.post(url,data=data,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    url_item = []</span><br><span class=\"line\">    list_item = json.loads(req.text)[<span class=\"string\">&quot;announcements&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> list_item:<span class=\"comment\"># 确保json.loads(req.text)[&quot;announcements&quot;]非空，是可迭代对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list_item:<span class=\"comment\"># 遍历announcements列表中的数据，目的是排除英文报告和报告摘要，唯一确定年度报告或者更新版</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;摘要&quot;</span>  <span class=\"keyword\">in</span> item[<span class=\"string\">&quot;announcementTitle&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;取消&quot;</span>  <span class=\"keyword\">in</span> item[<span class=\"string\">&quot;announcementTitle&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;英文&quot;</span>  <span class=\"keyword\">in</span> item[<span class=\"string\">&quot;announcementTitle&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;修订&quot;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&quot;announcementTitle&quot;</span>] <span class=\"keyword\">or</span> <span class=\"string\">&quot;更新&quot;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&quot;announcementTitle&quot;</span>] <span class=\"keyword\">or</span> <span class=\"string\">&quot;更正&quot;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&quot;announcementTitle&quot;</span>]:</span><br><span class=\"line\">            adjunctUrl = item[<span class=\"string\">&quot;adjunctUrl&quot;</span>] <span class=\"comment\"># &quot;finalpage/2019-04-30/1206161856.PDF&quot; 中间部分便为年报发布日期，只需对字符切片即可</span></span><br><span class=\"line\">            pdfurl = <span class=\"string\">&quot;http://static.cninfo.com.cn/&quot;</span> + adjunctUrl</span><br><span class=\"line\">            year  = getYear(item[<span class=\"string\">&quot;announcementTitle&quot;</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(year):</span><br><span class=\"line\">                item = &#123;&#125;</span><br><span class=\"line\">                item[<span class=\"string\">&quot;url&quot;</span>] = pdfurl</span><br><span class=\"line\">                item[<span class=\"string\">&quot;year&quot;</span>] = year</span><br><span class=\"line\">                url_item.append(item)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:<span class=\"comment\">#年报标题上无年份，或含年份外的其他数字</span></span><br><span class=\"line\">                downloadError(pdfurl,stock)</span><br><span class=\"line\">            df = pd.DataFrame([pdfurl])</span><br><span class=\"line\">            df.to_csv(<span class=\"string\">&#x27;年报url.csv&#x27;</span>, mode=<span class=\"string\">&#x27;a&#x27;</span>, index=<span class=\"literal\">False</span>, header=<span class=\"literal\">False</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            adjunctUrl = item[<span class=\"string\">&quot;adjunctUrl&quot;</span>] <span class=\"comment\"># &quot;finalpage/2019-04-30/1206161856.PDF&quot; 中间部分便为年报发布日期，只需对字符切片即可</span></span><br><span class=\"line\">            pdfurl = <span class=\"string\">&quot;http://static.cninfo.com.cn/&quot;</span> + adjunctUrl</span><br><span class=\"line\">            year  = getYear(item[<span class=\"string\">&quot;announcementTitle&quot;</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(year):</span><br><span class=\"line\">                item = &#123;&#125;</span><br><span class=\"line\">                item[<span class=\"string\">&quot;url&quot;</span>] = pdfurl</span><br><span class=\"line\">                item[<span class=\"string\">&quot;year&quot;</span>] = year</span><br><span class=\"line\">                url_item.append(item)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                downloadError(pdfurl,stock)</span><br><span class=\"line\">            df = pd.DataFrame([pdfurl])</span><br><span class=\"line\">            df.to_csv(<span class=\"string\">&#x27;年报url.csv&#x27;</span>, mode=<span class=\"string\">&#x27;a&#x27;</span>, index=<span class=\"literal\">False</span>, header=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    download(url_item,stock)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">url_item,stock</span>):<span class=\"comment\"># 下载年报</span></span><br><span class=\"line\">    s = requests.session()</span><br><span class=\"line\">    s.keep_alive = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> url_item:</span><br><span class=\"line\">        r = s.get(i[<span class=\"string\">&#x27;url&#x27;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&quot;年度报告/年报/&quot;</span>+ stock +<span class=\"string\">&#x27;/&#x27;</span>):</span><br><span class=\"line\">            os.makedirs(<span class=\"string\">&quot;年度报告/年报/&quot;</span>+ stock +<span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">        f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;年度报告/年报/&quot;</span>+ stock +<span class=\"string\">&#x27;/&#x27;</span>+stock+ <span class=\"string\">&quot;-&quot;</span> + i[<span class=\"string\">&#x27;year&#x27;</span>] + <span class=\"string\">&quot;年度报告&quot;</span> + <span class=\"string\">&quot;.pdf&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        f.write(r.content)                       </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;stock&#125;</span>-<span class=\"subst\">&#123;i[<span class=\"string\">&#x27;year&#x27;</span>]&#125;</span>年报下载完成！&quot;</span>) <span class=\"comment\"># 打印进度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">downloadError</span>(<span class=\"params\">url,stock</span>):<span class=\"comment\"># 存在公司年报不带年份下载到“存在问题年报文件夹”文件夹</span></span><br><span class=\"line\">    s = requests.session()</span><br><span class=\"line\">    s.keep_alive = <span class=\"literal\">False</span></span><br><span class=\"line\">    r = s.get(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&quot;存在问题年报/&quot;</span>+ stock +<span class=\"string\">&#x27;/&#x27;</span>):</span><br><span class=\"line\">        os.makedirs(<span class=\"string\">&quot;存在问题年报/&quot;</span>+ stock +<span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;存在问题年报/&quot;</span>+ stock +<span class=\"string\">&#x27;/&#x27;</span>+stock+ <span class=\"string\">&quot;-&quot;</span> + <span class=\"string\">&quot;年度报告&quot;</span> + <span class=\"string\">&quot;.pdf&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">    f.write(r.content)                       </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;stock&#125;</span>年报下载完成！&quot;</span>) <span class=\"comment\"># 打印进度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_orgid</span>():<span class=\"comment\">#获取A股公司代码对应的OrgId,用于构造表单数据</span></span><br><span class=\"line\">    org_dict = &#123;&#125;</span><br><span class=\"line\">    org_json = requests.get(<span class=\"string\">&quot;http://www.cninfo.com.cn/new/data/szse_stock.json&quot;</span>).json()[<span class=\"string\">&quot;stockList&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(org_json)):</span><br><span class=\"line\">        org_dict[org_json[i][<span class=\"string\">&quot;code&quot;</span>]] = org_json[i][<span class=\"string\">&quot;orgId&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> org_dict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getYear</span>(<span class=\"params\">tile:<span class=\"built_in\">str</span></span>):<span class=\"comment\">#获取年报标题上的年份，便于对年报进行重命名</span></span><br><span class=\"line\">    year = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tile:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i.isdigit():</span><br><span class=\"line\">            year += i</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(year) == <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> year</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">number</span>):<span class=\"comment\">#检查xls文件格式，调整文件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(number) == <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(number) == <span class=\"number\">6</span> <span class=\"keyword\">and</span> number.isdigit():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> number</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(number) == <span class=\"built_in\">float</span>:</span><br><span class=\"line\">        tem = <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(number))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tem) &lt; <span class=\"number\">6</span>:</span><br><span class=\"line\">            lenth = <span class=\"number\">6</span> - <span class=\"built_in\">len</span>(tem)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(lenth):</span><br><span class=\"line\">                tem = <span class=\"string\">&quot;0&quot;</span> + tem</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tem</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;格式错误：&quot;</span>,number)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getNumber</span>():<span class=\"comment\">#获取xls文件内的公司代码</span></span><br><span class=\"line\">    list_number = []</span><br><span class=\"line\">    <span class=\"keyword\">with</span> xlrd.open_workbook(<span class=\"string\">&quot;出口上市公司.xls&quot;</span>) <span class=\"keyword\">as</span> book:</span><br><span class=\"line\">        sheets = book.sheets()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> sheet <span class=\"keyword\">in</span> sheets:</span><br><span class=\"line\">            rows = sheet.nrows</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, rows):</span><br><span class=\"line\">                list1 = sheet.row_values(rowx=i)</span><br><span class=\"line\">                number = check(list1[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> number == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    list_number.append(number)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list_number</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:    </span><br><span class=\"line\">    org_dict = get_orgid()</span><br><span class=\"line\">    list_number = getNumber()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> list_number:<span class=\"comment\"># 一层按股票代码循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> [<span class=\"string\">&quot;2015&quot;</span>,<span class=\"string\">&quot;2016&quot;</span>,<span class=\"string\">&quot;2017&quot;</span>,<span class=\"string\">&quot;2018&quot;</span>,<span class=\"string\">&quot;2019&quot;</span>,<span class=\"string\">&quot;2020&quot;</span>,<span class=\"string\">&quot;2021&quot;</span>]:<span class=\"comment\"># 下载所需要的年份年报</span></span><br><span class=\"line\">            req(number ,year,org_dict)<span class=\"comment\"># 调用req函数</span></span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.5</span>)<span class=\"comment\"># 适当休眠，避免爬虫过快</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n<p>除了爬虫部分，剩余部分比较简单，也不再多解释</p>\n<p>接下来需要把下载的pdf转txt，由于文件过多，使用多进程加速处理</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdfminer.high_level <span class=\"keyword\">import</span> extract_text</span><br><span class=\"line\"><span class=\"keyword\">import</span> os ,psutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing          </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pdf2txt</span>(<span class=\"params\">folder_name</span>):<span class=\"comment\">#转换函数,多进程调用函数</span></span><br><span class=\"line\">    list_filename = os.listdir(folder_name)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> list_filename:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>  filename.endswith(<span class=\"string\">&quot;.PDF&quot;</span>)  <span class=\"keyword\">or</span> filename.endswith(<span class=\"string\">&quot;.pdf&quot;</span>):</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(folder_name+filename+<span class=\"string\">&quot;:转换中......&quot;</span>)</span><br><span class=\"line\">                text = extract_text(folder_name+filename)</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(folder_name+filename[:-<span class=\"number\">4</span>]+<span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(text)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(folder_name+filename+<span class=\"string\">&quot;:转换成功&quot;</span>)</span><br><span class=\"line\">                os.remove(folder_name+filename)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():<span class=\"comment\">#使用多进程，提高转换速度</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    list_folder_name = <span class=\"built_in\">next</span>(os.walk(<span class=\"string\">&quot;出口上市公司年报/&quot;</span>))[<span class=\"number\">1</span>]</span><br><span class=\"line\">    pool = multiprocessing.Pool(processes = psutil.cpu_count()+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> folder_name <span class=\"keyword\">in</span> list_folder_name:</span><br><span class=\"line\">        pool.apply_async(pdf2txt, (<span class=\"string\">&quot;出口上市公司年报/&quot;</span>+folder_name+<span class=\"string\">&#x27;/&#x27;</span>,))</span><br><span class=\"line\">    pool.close()</span><br><span class=\"line\">    pool.join()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n<p>pdf转转完后进行词频统计，依然使用多进程加速处理。</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba,os,psutil,xlrd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"><span class=\"comment\"># 定义关键词列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">key_word = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> xlrd.open_workbook(<span class=\"string\">&quot;关键词.xls&quot;</span>) <span class=\"keyword\">as</span> book:</span><br><span class=\"line\">        sheets = book.sheets()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> sheet <span class=\"keyword\">in</span> sheets:</span><br><span class=\"line\">            rows = sheet.nrows</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(rows):</span><br><span class=\"line\">            list1 = sheet.row_values(rowx=i)</span><br><span class=\"line\">            key_word.append((list1[<span class=\"number\">0</span>]))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getKeyWordData</span>(<span class=\"params\">text_path,filer_name</span>):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 读取文本</span></span><br><span class=\"line\">    key_word_data = &#123;&#125;</span><br><span class=\"line\">    path_filename = text_path + filer_name</span><br><span class=\"line\">    <span class=\"keyword\">with</span>  <span class=\"built_in\">open</span>(path_filename, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        txt = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># 使用精确模式对文本进行分词</span></span><br><span class=\"line\">        words = jieba.lcut(txt)</span><br><span class=\"line\">        <span class=\"comment\"># 通过键值对的形式存储词语及其出现的次数</span></span><br><span class=\"line\">        year = filer_name[:-<span class=\"number\">8</span>]</span><br><span class=\"line\">       </span><br><span class=\"line\">        year  = year[-<span class=\"number\">4</span>:]<span class=\"comment\">#获取年份</span></span><br><span class=\"line\">        filer_name = filer_name[:-<span class=\"number\">13</span>]<span class=\"comment\">#获取公司代码</span></span><br><span class=\"line\">       </span><br><span class=\"line\">        key_word_data[<span class=\"string\">&#x27;公司代码&#x27;</span>] = filer_name+<span class=\"string\">&#x27;年报&#x27;</span></span><br><span class=\"line\">        key_word_data[<span class=\"string\">&#x27;年份&#x27;</span>] = year</span><br><span class=\"line\">        <span class=\"keyword\">for</span> wd <span class=\"keyword\">in</span> key_word:</span><br><span class=\"line\">            key_word_data[wd] = words.count(wd)<span class=\"comment\">#统计关键词出现次数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> key_word_data   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">statistics</span>(<span class=\"params\">folder_name</span>):</span><br><span class=\"line\">    list_filename = os.listdir(<span class=\"string\">&quot;出口上市公司年报/&quot;</span>+folder_name)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> list_filename:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> filename.endswith(<span class=\"string\">&quot;.txt&quot;</span>):</span><br><span class=\"line\">            key_word_data = getKeyWordData(<span class=\"string\">&quot;出口上市公司年报/&quot;</span>+folder_name+<span class=\"string\">&quot;/&quot;</span>,filename)</span><br><span class=\"line\">            <span class=\"comment\">#os.remove(&quot;年度报告/&quot;+folder_name+&quot;/&quot;+filename)</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(filename+<span class=\"string\">&quot;分析完成&quot;</span>)</span><br><span class=\"line\">            datas = []</span><br><span class=\"line\">            datas.append(key_word_data)</span><br><span class=\"line\">            df = pd.DataFrame(datas)</span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;所有词频数据.csv&#x27;</span>) :</span><br><span class=\"line\">                df.to_csv(<span class=\"string\">&#x27;所有词频数据.csv&#x27;</span>, mode=<span class=\"string\">&#x27;a&#x27;</span>, index=<span class=\"literal\">False</span>,header=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                df.to_csv(<span class=\"string\">&#x27;所有词频数据.csv&#x27;</span>, mode=<span class=\"string\">&#x27;a&#x27;</span>, index=<span class=\"literal\">False</span>, header=<span class=\"literal\">False</span>)</span><br><span class=\"line\">            os.remove(<span class=\"string\">&quot;出口上市公司年报/&quot;</span>+folder_name+<span class=\"string\">&quot;/&quot;</span>+filename)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(filename+<span class=\"string\">&quot;不是txt文件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    list_folder_name = <span class=\"built_in\">next</span>(os.walk(<span class=\"string\">&quot;出口上市公司年报/&quot;</span>))[<span class=\"number\">1</span>]</span><br><span class=\"line\">    pool = multiprocessing.Pool(processes = psutil.cpu_count()+<span class=\"number\">1</span>)<span class=\"comment\">#使用多进程，提高统计速度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> folder_name <span class=\"keyword\">in</span> list_folder_name:</span><br><span class=\"line\">        pool.apply_async(statistics, (folder_name,))<span class=\"comment\">#一个进程处理一个文件夹</span></span><br><span class=\"line\">    pool.close()</span><br><span class=\"line\">    pool.join()</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"词频统计","categories":[{"name":"词频统计","slug":"词频统计","permalink":"http://example.com/categories/%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"type与object的关系","date":"2023-03-09T02:45:08.000Z","path":"type与object的关系/","content":"<p>如图所示：<span id=\"more\"></span></p>\n<p><img src=\"/img/%E5%85%B3%E7%B3%BB%E5%9B%BE.png\" alt=\"\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"type与object的关系","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"go包管理","date":"2023-02-15T08:57:30.000Z","path":"go包管理/","content":"<p>1.gopath,不使用mod管理时候外部包的引入通过环境变量gopath引入，包括自建包。</p>\n<span id=\"more\"></span>\n<p>2.使用mod管理后第三方依赖包会自动下载到第一个gopath的src目录下，此时对自建包则可以直接通过相对路径引入。<br>\n3.包内引用其他文件时是通过pack [包名]实现，因为引用优先找包内，之后才是其他包。一个文件夹其实就是一个包。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"go包管理","categories":[{"name":"go","slug":"go","permalink":"http://example.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"自定义Windows右键菜单","date":"2023-02-06T06:07:47.000Z","path":"自定义Windows右键菜单/","content":"<p>1、win+R快捷键，输入regedit后回车，打开注册表编辑器；</p>\n<p>在注册表编辑器中找到 “计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell”，</p>\n<span id=\"more\"></span>\n<p>2、右键点击shell，新建项，命名为“xxx”；</p>\n<p>3、右键点击“xxxx”，新建项，命名为“command”；这里注意：子项的名称必须为command</p>\n<p>4、双击，将“command”的数值数据修改为“xxxx.exe --cd “%V”。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"自定义Windows右键菜单","categories":[{"name":"windows配置","slug":"windows配置","permalink":"http://example.com/categories/windows%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"杂","slug":"杂","permalink":"http://example.com/tags/%E6%9D%82/"}]},{"title":"学习资源链接","date":"2023-02-06T05:54:46.000Z","path":"学习资源链接/","content":"<p>学习资源链接收集：</p>\n<span id=\"more\"></span>\n<p>1.<a href=\"https://pyqt5.com\">pyqt5</a><br>\n2.<a href=\"https://blog.csdn.net/yanlei208/article/details/119163795\">qt高分屏解决办法</a><br>\n3.<a href=\"https://csdiy.wiki/\">cs自学指南</a><br>\n4.<a href=\"https://www.pdai.tech/md/java/basic/java-basic-oop.html\">java基础知识</a><br>\n5.<a href=\"https://www.cnblogs.com/FG123/p/10261676.html\">rpc技术</a><br>\n6.<a href=\"http://docs.peewee-orm.com/en/latest/peewee/relationships.html#relationships\">peewee orm</a><br>\n7.<a href=\"https://docs.ponyorm.org/queries.html\">pony orm</a><br>\n8.[异步orm]<a href=\"https://github.com/encode/databases\">https://github.com/encode/databases</a>)</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"学习资源链接","categories":[{"name":"学习资源链接","slug":"学习资源链接","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5/"}],"tags":[{"name":"学习资源链接","slug":"学习资源链接","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5/"}]},{"title":"pyqt5线程正确用法","date":"2023-01-31T02:31:02.000Z","path":"pyqt5线程正确用法/","content":"<p>timer任务为Qthread里另一条线程，Qthread实质为管理线程的工具</p>\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtCore <span class=\"keyword\">import</span> QTimer</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtCore <span class=\"keyword\">import</span> QThread,pyqtSignal,QObject</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Work</span>(<span class=\"title class_ inherited__\">QObject</span>):</span><br><span class=\"line\">    sinal = pyqtSignal()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,total_page=<span class=\"number\">20</span></span>):</span><br><span class=\"line\">      <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">tim</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;timer&quot;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(QThread.currentThreadId(),self.tes)</span><br><span class=\"line\">      self.time.stop()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dowork</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      self.time = QTimer()</span><br><span class=\"line\">      self.time.timeout.connect(self.tim)</span><br><span class=\"line\">      self.time.start(<span class=\"number\">3</span>)</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(QThread.currentThreadId(),self.tes)</span><br><span class=\"line\">      self.sinal.emit()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(QThread.currentThreadId())</span><br><span class=\"line\">      self.tes = <span class=\"string\">&quot;tset&quot;</span></span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cou</span>(<span class=\"title class_ inherited__\">QObject</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,total_page=<span class=\"number\">20</span></span>):</span><br><span class=\"line\">      <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">    </span><br><span class=\"line\">      self.work =  Work()</span><br><span class=\"line\">      </span><br><span class=\"line\">      self.threa = QThread()</span><br><span class=\"line\">      self.work.moveToThread(self.threa)</span><br><span class=\"line\">      </span><br><span class=\"line\">      self.threa.started.connect(self.work.dowork)</span><br><span class=\"line\">      self.work.sinal.connect(self.sinal)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sinal</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;sinal&quot;</span>)</span><br><span class=\"line\">      <span class=\"comment\">#timer任务为Qthread里另一条线程，Qthread实质为管理线程的工具</span></span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"pyqt5线程正确用法","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"pyqt线程","slug":"pyqt线程","permalink":"http://example.com/tags/pyqt%E7%BA%BF%E7%A8%8B/"}]},{"title":"python.asyncio/await","date":"2023-01-31T02:09:04.000Z","path":"python-asyncio-await/","content":"<p><strong>asyncio.wait 用法：</strong></p>\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">taskIO_1</span>():   </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始运行IO任务1...&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;IO任务1已完成，耗时2s&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> taskIO_1.__name__</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">taskIO_2</span>():       </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;开始运行IO任务2...&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">3</span>)  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;IO任务2已完成，耗时3s&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> taskIO_2.__name__</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    loop = asyncio.get_event_loop() </span><br><span class=\"line\">    tasks = [taskIO_1(), taskIO_2()]</span><br><span class=\"line\">    loop.run_until_complete(asyncio.wait(tasks)) <span class=\"comment\"># 完成事件循环，直到最后一个任务结束</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;所有IO任务总耗时%.5f秒&#x27;</span> % <span class=\"built_in\">float</span>(time.time()-start))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">sleep_time</span>):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(sleep_time)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务-&#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(sleep_time)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>():</span><br><span class=\"line\">    task_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">        task = asyncio.create_task(func(i))</span><br><span class=\"line\">        task_list.append(task)</span><br><span class=\"line\">    results = <span class=\"keyword\">await</span> asyncio.gather(*task_list)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    asyncio.run(run())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;所有IO任务总耗时%.5f秒&#x27;</span> % <span class=\"built_in\">float</span>(time.time()-start))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">sleep_time</span>):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(sleep_time)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务-&#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(sleep_time)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>():</span><br><span class=\"line\">    task_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">        task = asyncio.create_task(func(i))</span><br><span class=\"line\">        task_list.append(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    done, pending = <span class=\"keyword\">await</span> asyncio.wait(task_list, timeout=<span class=\"literal\">None</span>)<span class=\"comment\">#pending 为超时未完成的协程 Task</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> done_task <span class=\"keyword\">in</span> done:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(done_task.result())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    asyncio.run(run())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;所有IO任务总耗时%.5f秒&#x27;</span> % <span class=\"built_in\">float</span>(time.time()-start))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"python-asyncio-await","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"asyncio","slug":"asyncio","permalink":"http://example.com/tags/asyncio/"}]},{"title":"python参数传递","date":"2022-12-27T09:06:24.000Z","path":"python参数传递/","content":"<p><strong>引用其实是一个类似指针的变量，参数传递的是复制的变量（引用）</strong> <span id=\"more\"></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span>():</span><br><span class=\"line\">    test = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">t</span>(<span class=\"params\"><span class=\"built_in\">object</span>,int_</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(int_))</span><br><span class=\"line\">    <span class=\"built_in\">object</span>.test = <span class=\"number\">2</span><span class=\"comment\">#解引用，</span></span><br><span class=\"line\">    <span class=\"built_in\">object</span> = test()<span class=\"comment\">##改变引用的值，该引用与外部引用无关，object类似指针，指向生成的对象的地址</span></span><br><span class=\"line\">    int_ = <span class=\"number\">5</span><span class=\"comment\">##改变引用的值，该引用与外部引用无关,变量int_类似指针，指向5的地址</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(int_))</span><br><span class=\"line\"></span><br><span class=\"line\">text = test()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">int_ =<span class=\"number\">4</span><span class=\"comment\">#变量int_d值是4的地址</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(int_))</span><br><span class=\"line\">t(text,int_)<span class=\"comment\">#参数传递是复制变量text,int_，变量里面的值是test（）对象、4的地址.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>程序输出的id地址如下：<br>\n1410117920<br>\n1410117920<br>\n1410117920<br>\n1410117952</p>\n</blockquote>\n<blockquote>\n<p>python 把参数传递统一为值传递，只不过传递的值（形参）是实参的地址。形参也是一个变量，变量的值是实参的地址，可以改形参变量的值，使它不再指向实参。网络上的可变类型与不可变类型解释不准确，所谓不可变类型只是变量是const而已，可变类型变量是非const。</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"python参数传递","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"python基础","slug":"python基础","permalink":"http://example.com/tags/python%E5%9F%BA%E7%A1%80/"}]},{"title":"基于python的sqlite3连接池","date":"2022-12-26T14:19:42.000Z","path":"基于python的sqlite3连接池/","content":"<p><strong>连接池应该用单例模式，可以实例化后通过import方式引入</strong></p>\n<blockquote>\n<p>例如: test = Database(),import test,应该保证test实例全局唯一。</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Database</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.creat_pool()</span><br><span class=\"line\">        connect = self.<span class=\"built_in\">list</span>.pop()</span><br><span class=\"line\">        connect.cursor().execute(<span class=\"string\">&#x27;&#x27;&#x27;CREATE TABLE IF NOT EXISTS student</span></span><br><span class=\"line\"><span class=\"string\">       ( </span></span><br><span class=\"line\"><span class=\"string\">        id_number        CHAR(50)    NOT NULL ,</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">        user_name       CHAR(50)    NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">        gender           bool,</span></span><br><span class=\"line\"><span class=\"string\">        password        char(20)    NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">        img_path        char(60),</span></span><br><span class=\"line\"><span class=\"string\">        vector          blob        ,</span></span><br><span class=\"line\"><span class=\"string\">           </span></span><br><span class=\"line\"><span class=\"string\">        salt            char(10)  NOT NULL ,</span></span><br><span class=\"line\"><span class=\"string\">        cout              INT,</span></span><br><span class=\"line\"><span class=\"string\">        PRIMARY KEY (id_number )</span></span><br><span class=\"line\"><span class=\"string\">                 )without rowid;&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">creat_pool</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.<span class=\"built_in\">list</span> = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">            self.conn = sqlite3.connect(<span class=\"string\">&#x27;./resources/company.db&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">def</span> <span class=\"title function_\">dict_factory</span>(<span class=\"params\">cursor, row</span>):<span class=\"comment\">#重定义row_factory函数查询返回数据类型是字典形式</span></span><br><span class=\"line\">                d = &#123;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> idx, col <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(cursor.description):</span><br><span class=\"line\">                    d[col[<span class=\"number\">0</span>]] = row[idx]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> d</span><br><span class=\"line\">            self.conn.row_factory = dict_factory</span><br><span class=\"line\">            self.<span class=\"built_in\">list</span>.append(self.conn)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_connection</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(self.<span class=\"built_in\">list</span>)&gt;<span class=\"number\">5</span> ):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.<span class=\"built_in\">list</span>.pop()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">                self.conn = sqlite3.connect(<span class=\"string\">&#x27;./resources/company.db&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">def</span> <span class=\"title function_\">dict_factory</span>(<span class=\"params\">cursor, row</span>):<span class=\"comment\">#重定义row_factory函数查询返回数据类型是字典形式</span></span><br><span class=\"line\">                    d = &#123;&#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> idx, col <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(cursor.description):</span><br><span class=\"line\">                        d[col[<span class=\"number\">0</span>]] = row[idx]</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> d</span><br><span class=\"line\">                self.conn.row_factory = dict_factory</span><br><span class=\"line\">                self.<span class=\"built_in\">list</span>.append(self.conn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.<span class=\"built_in\">list</span>.pop()</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">student</span>():<span class=\"comment\">##内部类可以用于操作student表，增删改查等</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">p</span>():<span class=\"comment\">#静态函数，访问方式test = Database()，test.student.p()</span></span><br><span class=\"line\">            connect = test.<span class=\"built_in\">list</span>.pop()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> connect.cursor().execute(<span class=\"string\">&quot;select  user_name   from student&quot;</span>):</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test&quot;</span>,i[<span class=\"string\">&quot;user_name&quot;</span>])</span><br><span class=\"line\">            connect.close()</span><br><span class=\"line\"></span><br><span class=\"line\">test = Database()</span><br><span class=\"line\">test.student.p()<span class=\"comment\">#访问内部类静态函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">21</span>):</span><br><span class=\"line\">    connect = test.get_connection()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> connect.cursor().execute(<span class=\"string\">&quot;select  user_name   from student&quot;</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i[<span class=\"string\">&quot;user_name&quot;</span>])</span><br><span class=\"line\">    connect.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(test.<span class=\"built_in\">list</span>))</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"基于python的sqlite3连接池","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"sqlite3","slug":"sqlite3","permalink":"http://example.com/tags/sqlite3/"}]},{"title":"开源协议","date":"2022-12-11T00:46:42.000Z","path":"开源协议/","content":"<h3 id=\"各种开源协议的区别如图所示：-more\">各种开源协议的区别如图所示： <span id=\"more\"></span></h3>\n<p><img src=\"/img/%E5%BC%80%E6%BA%90.png\" alt=\"\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"开源协议","categories":[{"name":"杂","slug":"杂","permalink":"http://example.com/categories/%E6%9D%82/"}],"tags":[{"name":"开源协议","slug":"开源协议","permalink":"http://example.com/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"}]},{"title":"java环境常识","date":"2022-12-11T00:34:55.000Z","path":"java环境常识/","content":"<h3 id=\"1-JVM介绍\">1.JVM介绍</h3>\n<h4 id=\"1-1-什么是JVM？\">1.1 什么是JVM？</h4>\n<p>JVM是Java Virtual Machine（Java虚拟机）的简称，是一种用于计算设备的规范，是一个虚构出来的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。<span id=\"more\"></span></p>\n<h4 id=\"1-2-JVM的优点\">1.2 JVM的优点</h4>\n<h4 id=\"1-3-一次编写，到处运行。\">1.3 一次编写，到处运行。</h4>\n<p>JVM可以让java程序，一次编写，导出运行。让底层代码和运行环境分离开，编写好一份代码后，不用再次修改内容，只用通过安装不同的JVM环境自动进行转换即可运行，在各种系统中无缝连接。</p>\n<h4 id=\"1-4-自动内存管理，垃圾回收机制。\">1.4 自动内存管理，垃圾回收机制。</h4>\n<p>在Java诞生之时，C和C++称霸天下，但是这两种语言中没有内存管理机制，是通过手动操作来进行的管理，非常麻烦和繁琐。</p>\n<h4 id=\"1-5-数组下标越界检查\">1.5 数组下标越界检查</h4>\n<p>在Java诞生之时，还有个让当时C和C++大佬头疼的问题是，数组下标越界是没有检查机制的。</p>\n<p>JVM又一次看见了大佬们的烦恼，果断提供了数组下标越界的自动检查机制，在检测到数组下标出现越界后，会在运行时自动抛出“java.lang.ArrayIndexOutOfBoundsException”这个异常，在当时可是感动了很多业界大佬（我猜的）。</p>\n<h4 id=\"1-6多态\">1.6多态</h4>\n<p>JVM还有一个多态功能，是通过相同接口，不同的实例进行实现，完成不同的业务操作，比如：定义了一个动物接口（里面有一个吃的方法），我们就可以通过这个动物创造小猫（吃鱼），再创造一个狗狗（吃肉），再创造一个小助手（吃零食，O(∩_∩)O哈哈~）。</p>\n<p>仔细想想，对我们有啥影响呢，那好处老多了，比如：</p>\n<p>（1）消除类型之间的耦合关系；</p>\n<p>（2）可替换性；</p>\n<p>（3）可扩充性；</p>\n<p>（4）接口性；</p>\n<p>（5）灵活性；</p>\n<p>（6）简化性；</p>\n<h4 id=\"1-7-JVM、JRE、JDK之间的关系\">1.7 JVM、JRE、JDK之间的关系</h4>\n<p>如图所示：<br>\n<img src=\"/img/java.png\" alt=\"\"></p>\n<h4 id=\"1-8-java源代码编译、执行流程\">1.8 java源代码编译、执行流程</h4>\n<p><img src=\"/img/java1.png\" alt=\"\"></p>\n<h4 id=\"1-9-jit技术\">1.9 jit技术</h4>\n<p>首先，我们大家都知道，通常javac将程序源代码编译，转换成java字节码，JVM通过解释字节码将其翻译成对应的机器指令，逐条读入，逐条解释翻译。很显然，经过解释执行，其执行速度必然会比可执行的二进制字节码程序慢。为了提高执行速度，引入了JIT技术。<br>\n在运行时JIT会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，采用该JIT技术可以，可以接近以前纯编译技术。下面我看看，JIT的工作过程。<br>\nJIT 编译过程当JIT编译启用时（默认是启用的），JVM读入.class文件解释后，将其发给JIT编译器。JIT编译器将字节码编译成本机机器代码我们了解了JIT的工作原理及过程，同样也发现了个问题，由于JIT对每条字节码都进行编译，造成了编译过程负担过重。为了避免这种情况，当前的JIT只对经常执行的字节码进行编译，如循环等。<br>\n需要说明的是，JIT并不总是奏效，不能期望JIT一定能够加速你代码执行的速度，更糟糕的是她有可能降低代码的执行速度。这取决于你的代码结构，当然很多情况下我们还是能够如愿以偿的。<br>\njvm可以通过设置参数去统计模块执行的次数，对于执行次数多的模块进行特殊优化。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"java环境常识","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"kmp算法","date":"2022-12-08T06:23:31.000Z","path":"kmp算法/","content":"<p><strong>字符串匹配算法</strong><br>\n1.暴力求解代码如下：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">match</span><span class=\"params\">(<span class=\"type\">char</span> *src, <span class=\"type\">int</span> size_r, <span class=\"type\">char</span> *target, <span class=\"type\">int</span> size_)</span><span class=\"comment\">//直接暴力求解</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size_r &lt; size_)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> each_sr = <span class=\"number\">0</span>, each_target = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (each_target &lt; size_ &amp;&amp; each_sr &lt; size_r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (src[each_sr] == target[each_target])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            each_target++;</span><br><span class=\"line\">            each_sr++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            each_sr = ++count;<span class=\"comment\">//匹配失败，回到前面重新开始</span></span><br><span class=\"line\">            each_target = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (each_target == size_)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> each_sr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p1 = <span class=\"string\">&quot;dffhhgahabhghhgaabjbdfh898jhgabjjdffj&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p2 = <span class=\"string\">&quot;hgabj&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> p1_size = <span class=\"built_in\">strlen</span>(p1), p2_size = <span class=\"built_in\">strlen</span>(p2);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = match(p1, <span class=\"built_in\">strlen</span>(p1), p2, <span class=\"built_in\">strlen</span>(p2));<span class=\"comment\">//返回值是匹配成功后，子串中的最后一个字符索引</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *p3 = p1 + index - p2_size;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p2_size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p3[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.kmp字符串匹配算法代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">kmp</span><span class=\"params\">(<span class=\"type\">char</span> *src, <span class=\"type\">int</span> size_r, <span class=\"type\">char</span> *target, <span class=\"type\">int</span> size_)</span><span class=\"comment\">//利用前面记录求解</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    待续、、测试</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p1 = <span class=\"string\">&quot;dffhhgahabhghhgaabjbdfh898jhgabjjdffj&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p2 = <span class=\"string\">&quot;hgabj&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> p1_size = <span class=\"built_in\">strlen</span>(p1), p2_size = <span class=\"built_in\">strlen</span>(p2);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = kmp(p1, <span class=\"built_in\">strlen</span>(p1), p2, <span class=\"built_in\">strlen</span>(p2));<span class=\"comment\">//返回值是匹配成功后，子串中的最后一个字符索引</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *p3 = p1 + index - p2_size;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p2_size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p3[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"kmp算法","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"setupUi()函数","date":"2022-12-04T07:00:14.000Z","path":"setupUi-函数/","content":"<p>qt提供了工具以拖拽控件的方式的简化了Ui代码的编写，在qtcreator里设计好ui后会自动生成对应qml文件，qml会被翻译成C++代码。同样地，qml文件也可以翻译成python代码，然后pyqt里调用翻译出来的ui.py代码。<span id=\"more\"></span><br>\n可以在cmd通过命令方式把qml文件翻译成python代码, <a href=\"http://xn--Ui-pt3cz19akll.xn--uiUi-r85fv52hmcf6n3dfjw.py\">例如把Ui.ui文件翻译成Ui.py</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyuic5 Ui.ui &gt; Ui.py</span><br></pre></td></tr></table></figure>\n<p>Ui.ui的效果如图所示，其中只有一个登录按钮。<br>\n<img src=\"/img/login.png\" alt=\"\"><br>\nUi.py文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PyQt5 <span class=\"keyword\">import</span> QtCore, QtGui, QtWidgets</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ui</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setupUi</span>(<span class=\"params\">self, FormLogin</span>):</span><br><span class=\"line\">        FormLogin.setObjectName(<span class=\"string\">&quot;FormLogin&quot;</span>)</span><br><span class=\"line\">        FormLogin.resize(<span class=\"number\">400</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</span><br><span class=\"line\">        sizePolicy.setHorizontalStretch(<span class=\"number\">0</span>)</span><br><span class=\"line\">        sizePolicy.setVerticalStretch(<span class=\"number\">0</span>)</span><br><span class=\"line\">        sizePolicy.setHeightForWidth(FormLogin.sizePolicy().hasHeightForWidth())</span><br><span class=\"line\">        FormLogin.setSizePolicy(sizePolicy)</span><br><span class=\"line\">        FormLogin.setMinimumSize(QtCore.QSize(<span class=\"number\">400</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\">        FormLogin.setMaximumSize(QtCore.QSize(<span class=\"number\">400</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\">        self.btnLogin = QtWidgets.QPushButton(FormLogin)</span><br><span class=\"line\">        self.btnLogin.setGeometry(QtCore.QRect(<span class=\"number\">110</span>, <span class=\"number\">120</span>, <span class=\"number\">181</span>, <span class=\"number\">31</span>))</span><br><span class=\"line\">        self.btnLogin.setObjectName(<span class=\"string\">&quot;btnLogin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.retranslateUi(FormLogin)</span><br><span class=\"line\">        QtCore.QMetaObject.connectSlotsByName(FormLogin)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">retranslateUi</span>(<span class=\"params\">self, FormLogin</span>):</span><br><span class=\"line\">        _translate = QtCore.QCoreApplication.translate</span><br><span class=\"line\">        FormLogin.setWindowTitle(_translate(<span class=\"string\">&quot;FormLogin&quot;</span>, <span class=\"string\">&quot;IM&quot;</span>))</span><br><span class=\"line\">        self.btnLogin.setText(_translate(<span class=\"string\">&quot;FormLogin&quot;</span>, <span class=\"string\">&quot;登  录&quot;</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>重点看其中 QtCore.QMetaObject.connectSlotsByName(FormLogin)函数，此函数的作用是根据槽函数的函数名称把UI控件发出的信号连接到槽函数。</p>\n</blockquote>\n<p>以登录按钮控件举例，如果通过connectSlotsByName(FormLogin)函数把点击信号与某一函数自动链接，则此函数命名遵循一定规则。<br>\n例如函数def on_btnLogin_clicked(self)，on表示这是一个槽函数，btnLogin是登录控件对象的名字(对象名字需要唯一)，clicked表示登录控件发出的点击信号,而且需要@pyqtSlot()装饰器装饰槽函数。<br>\n完整的例子代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtCore <span class=\"keyword\">import</span> pyqtSlot</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QWidget</span><br><span class=\"line\"><span class=\"keyword\">from</span> Ui <span class=\"keyword\">import</span> Ui</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span>(QWidget,Ui):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.setupUi(self)</span><br><span class=\"line\">        self.btnLogin.clicked.connect(self.lin)</span><br><span class=\"line\"><span class=\"meta\">    @pyqtSlot()</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">on_btnLogin_clicked</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lin</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;lin&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ui = test()</span><br><span class=\"line\">    ui.show()</span><br><span class=\"line\">    app.exec_()</span><br></pre></td></tr></table></figure>\n<p>也可以手动连接信号与槽函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.btnLogin.clicked.connect(self.lin)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外在qtcreator（c++）里面可以右键控件点击转到槽，可以在正确位置生成相应的槽函数，前提是Ui界面类的.ui、.h、.cpp文件名需要保持一致。qtcreateor通过相同的文件名确定槽函数的正确位置（即生成的槽函数应该位于哪个源文件）。槽函数名规则跟上述一致：“on_控件对象名_控件信号”。如下图所示：</p>\n</blockquote>\n<p><img src=\"/img/qt1.png\" alt=\"\"><br>\n<img src=\"/img/qt2.png\" alt=\"\"><br>\n<img src=\"/img/qt3.png\" alt=\"\"><br>\n<img src=\"/img/qt4.png\" alt=\"\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"setupUi-函数","categories":[{"name":"pyqt","slug":"pyqt","permalink":"http://example.com/categories/pyqt/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"http://example.com/tags/pyqt/"}]},{"title":"windows下使用wsl安装linux","date":"2022-12-03T03:24:45.000Z","path":"windows下使用wsl安装linux/","content":"<p><strong>1.打开虚拟服务以及wsl子系统功能</strong><br>\n打开 控制面板，选择 程序和功能，选择 启用和关闭Windows功能，勾选图中红框内的两项。<br>\n如图所示：<span id=\"more\"></span><br>\n<img src=\"/img/wsl.png\" alt=\"\"><br>\n然后重启系统。<br>\n<strong>2.安装linux系统（ubuntu）</strong><br>\n打开cmd输入命令(默认安装状最新版本)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --install -d ubuntu</span><br></pre></td></tr></table></figure>\n<p><strong>3.配置用户</strong><br>\n安装完成后会自动打开bash(ubuntu下)引导你创建一个用户，需要输入用户名以及密码。<br>\n设置完成后打开cmd输入“bash”默认进入新创建的用户而不是root，root默认没有密码，切换前可先设置root密码。<br>\n打开cmd输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root </span><br></pre></td></tr></table></figure>\n<p>然后输入root密码完成密码设置，再输入su命令后输入密码切换用户。<br>\n更改默认进入用户为root用户，打开cmd输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu config --default-user root</span><br></pre></td></tr></table></figure>\n<p><strong>4.换源</strong><br>\n<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\">打开清华源网站</a><br>\n复制对版本的软件源配置内容，粘贴到ubuntu系统 <strong>/etc/apt/sources.list</strong> 文件下。<br>\n使用 <strong>apt安装</strong> 如果出现如下错误：</p>\n<blockquote>\n<p>Certificate verification failed: The certificate is NOT trusted. The certificate chain uses expired…</p>\n</blockquote>\n<p>则打开cmd输入bash，再输入date命令查看时间是否与网络时间相一致。如果不一致则使用以下命令安装ntp时间校准服务，且输入命令前把软件源配置内容中的https更改为http。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt intstall ntp</span><br></pre></td></tr></table></figure>\n<p>然后把前面所述http更改回https再测试，如果再出现问题则尝试用以下命令重新安装cer证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>\n<p><strong>5.安装g++</strong><br>\n打开cmd 输入bash，输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install g++</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外打开cmd输入bash时所在目录为:/mnt/c…或:/mnt/d…,mnt是linux系统挂载硬盘目录，wsl上的linux系统把windows系统上的盘符挂载在mnt目录上实现了文件共享，不需要跨系统复制文件。</p>\n</blockquote>\n<p><strong>6.将Ubuntu迁移到C盘外的磁盘</strong><br>\ncmd中输入以下命令查看linux系统发行版。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl -l</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\Desktop&gt;wsl -l</span><br><span class=\"line\">适用于 Linux 的 Windows 子系统分发版:</span><br><span class=\"line\">ubuntu (默认)</span><br></pre></td></tr></table></figure>\n<p>输入以下命令将linux系统导出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --<span class=\"built_in\">export</span> ubuntu d:\\ubuntu2204lts.tar</span><br></pre></td></tr></table></figure>\n<p>然后输入以下命令注销C盘上的linux系统：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --unregister ubuntu</span><br></pre></td></tr></table></figure>\n<p>输入以下命令新建文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> d:\\ubuntu </span><br></pre></td></tr></table></figure>\n<p>输入以下命令把导出的linux系统导入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --import ubuntu d:\\Ubuntu d:\\ubuntu2204lts.tar</span><br></pre></td></tr></table></figure>\n<p>把以下路径的相关文件删除：<br>\nC:\\Users\\用户名\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"windows下使用wsl安装linux","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"}],"tags":[{"name":"wsl","slug":"wsl","permalink":"http://example.com/tags/wsl/"}]},{"title":"利用'|'运算符进行配置的原理","date":"2022-11-30T23:30:52.000Z","path":"利用“或”运算符进行配置的原理/","content":"<blockquote>\n<p>粉丝很多的何同学做了期关于键盘开发的视频，视频里面出了点低级错误。<span id=\"more\"></span><br>\n“在过往学习中使用过’|'进行多个GPIO引脚的定义，但是并没有深入了解这个符号的含义，由此在该功能实现后简化代码时错误使用了|，并且没有加以验证，导致了错误。”<br>\n这是何童鞋原话。</p>\n</blockquote>\n<p>接下来我们去深入理解用’|'运算符进行配置gpio引脚的原理：</p>\n<blockquote>\n<p>talk is cheap ,show you the code.<br>\n先来看一段Gpio引脚的宏定义,以及引脚配置代码：</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_0                 ((uint16_t)0x0001)  <span class=\"comment\">/*!&lt; Pin 0 selected  0000000001*/</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_1                 ((uint16_t)0x0002)  <span class=\"comment\">/*!&lt; Pin 1 selected 000000000010*/</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_2                 ((uint16_t)0x0004)  <span class=\"comment\">/*!&lt; Pin 2 selected 000000000100*/</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_3                 ((uint16_t)0x0008)  <span class=\"comment\">/*!&lt; Pin 3 selected 00000001000*/</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_4                 ((uint16_t)0x0010)  <span class=\"comment\">/*!&lt; Pin 4 selected 0000000010000*/</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_5                 ((uint16_t)0x0020)  <span class=\"comment\">/*!&lt; Pin 5 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_6                 ((uint16_t)0x0040)  <span class=\"comment\">/*!&lt; Pin 6 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_7                 ((uint16_t)0x0080)  <span class=\"comment\">/*!&lt; Pin 7 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_8                 ((uint16_t)0x0100)  <span class=\"comment\">/*!&lt; Pin 8 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_9                 ((uint16_t)0x0200)  <span class=\"comment\">/*!&lt; Pin 9 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_10                ((uint16_t)0x0400)  <span class=\"comment\">/*!&lt; Pin 10 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_11                ((uint16_t)0x0800)  <span class=\"comment\">/*!&lt; Pin 11 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_12                ((uint16_t)0x1000)  <span class=\"comment\">/*!&lt; Pin 12 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_13                ((uint16_t)0x2000)  <span class=\"comment\">/*!&lt; Pin 13 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_14                ((uint16_t)0x4000)  <span class=\"comment\">/*!&lt; Pin 14 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_15                ((uint16_t)0x8000)  <span class=\"comment\">/*!&lt; Pin 15 selected */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GPIO_Pin_All               ((uint16_t)0xFFFF)  <span class=\"comment\">/*!&lt; All pins selected */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"type\">uint16_t</span> GPIO_Pin;             <span class=\"comment\">/*!&lt; Specifies the GPIO pins to be configured.</span></span><br><span class=\"line\"><span class=\"comment\">                                      This parameter can be any value of @ref GPIO_pins_define */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  GPIOSpeed_TypeDef GPIO_Speed;  <span class=\"comment\">/*!&lt; Specifies the speed for the selected pins.</span></span><br><span class=\"line\"><span class=\"comment\">                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  GPIOMode_TypeDef GPIO_Mode;    <span class=\"comment\">/*!&lt; Specifies the operating mode for the selected pins.</span></span><br><span class=\"line\"><span class=\"comment\">                                      This parameter can be a value of @ref GPIOMode_TypeDef */</span></span><br><span class=\"line\">&#125;GPIO_InitTypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">IO_Init</span> <span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\tGPIO_InitTypeDef  GPIO_InitStructure; <span class=\"comment\">//定义GPIO的初始化枚举结构</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_15; <span class=\"comment\">//选择端口号                        </span></span><br><span class=\"line\">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class=\"comment\">//选择IO接口工作方式 //上拉电阻       </span></span><br><span class=\"line\">\tGPIO_Init(GPIOB,&amp;GPIO_InitStructure);\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再看GPIO_Init()函数 <strong>部分</strong> 代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GPIO_Init</span><span class=\"params\">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> currentpin = <span class=\"number\">0x00</span>, pinpos = <span class=\"number\">0x00</span>, pos = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* Configure the eight low port pins */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pinpos = <span class=\"number\">0x00</span>; pinpos &lt; <span class=\"number\">0x08</span>; pinpos++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      pos = ((<span class=\"type\">uint32_t</span>)<span class=\"number\">0x01</span>) &lt;&lt; pinpos;</span><br><span class=\"line\">      <span class=\"comment\">/* Get the port pins position */</span></span><br><span class=\"line\">      currentpin = (GPIO_InitStruct-&gt;GPIO_Pin) &amp; pos;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentpin == pos)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过上述代码很容易理解利用“|”运算符进行引脚配置的原理。</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"利用“或”运算符进行配置的原理","categories":[{"name":"杂","slug":"杂","permalink":"http://example.com/categories/%E6%9D%82/"}],"tags":[{"name":"杂","slug":"杂","permalink":"http://example.com/tags/%E6%9D%82/"}]},{"title":"C++对象细节","date":"2022-11-25T01:04:55.000Z","path":"C-对象细节/","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">X</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A *a = <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">a.<span class=\"built_in\">X</span>();<span class=\"comment\">//调用</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<blockquote>\n<p>调用a.x()的实质是调用x()函数，以对象a作为参数，即：x(&amp;a),&amp;a是this指针。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">vfunc1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">vfunc2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> m_data1, m_data2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">vfunc1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> m_data3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>: <span class=\"keyword\">public</span> B &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">vfunc2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> m_data1, m_data4;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面类的对象内存布局如图所示：<br>\n<img src=\"/img/%E5%86%85%E5%AD%98.png\" alt=\"\"></p>\n<blockquote>\n<p>第一个为虚函数指针，它指向虚函数表，虚函数表编译器期生成，每个存在虚函数的类均有一个虚函数表，且位于代码段。虚函数指针在运行期间由new生成，生成后指向对应的代码段的虚函数表。多数规则、特性等是处于编译期内。</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"C-对象细节","categories":[{"name":"C++","slug":"C","permalink":"http://example.com/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"归并排序","date":"2022-11-21T06:16:29.000Z","path":"归并排序/","content":"<p><strong>归并排序过程如图所示：</strong><span id=\"more\"></span><br>\n<img src=\"/img/%E5%BD%92%E5%B9%B6.png\" alt=\"\"><br>\n用递归实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> num 13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void Merge(int arr[], int tmp[], int start,int mid, int end)//合并小组并排序</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tint i = start;//i标识左小组的第一个元素位置</span></span><br><span class=\"line\"><span class=\"comment\">// \tint j = mid + 1;//j标识右小组的第一个元素位置</span></span><br><span class=\"line\"><span class=\"comment\">// \tint k = start;//tmp当前小组存放的起始位置</span></span><br><span class=\"line\"><span class=\"comment\">// \twhile (i &lt; mid + 1 &amp;&amp; j &lt; end + 1)//左小组越界或右小组越界才能退出</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\tif (arr[i] &lt;= arr[j])</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t\ttmp[k++] = arr[i++];</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\telse</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t\ttmp[k++] = arr[j++];</span></span><br><span class=\"line\"><span class=\"comment\">// \t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \twhile (j &lt; end + 1)//如果右边小组没有越界</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\ttmp[k++] = arr[j++];</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \twhile (i &lt; mid + 1)//如果左边小组没有越界</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\ttmp[k++] = arr[i++];</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;//哦哦就是补齐了，把数组放到新的那个临时数组中去了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \tfor (i = start; i &lt;= end; i++)</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\tarr[i] = tmp[i];</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;//分组排序完毕后，把结果复制回原来待排序数组中。</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void MergeS(int arr[], int tmp[], int start, int end)//划分小组，现在没有end.</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tif (start &lt; end)</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\tint mid = (start+end)/2;</span></span><br><span class=\"line\"><span class=\"comment\">// \t\tMergeS(arr, tmp, start, mid);//递归分组</span></span><br><span class=\"line\"><span class=\"comment\">// \t\tMergeS(arr, tmp, mid + 1, end);//自我递归调用</span></span><br><span class=\"line\"><span class=\"comment\">// \t\tMerge(arr, tmp, start, mid, end);//合并</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;//递归调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void MergeSort(int arr[], int len)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// \tint *tmp = (int *)malloc(sizeof(int)*len);//开了一个排序后结果保存的临时数组</span></span><br><span class=\"line\"><span class=\"comment\">// \tMergeS(arr, tmp, 0, len - 1);//递归调用</span></span><br><span class=\"line\"><span class=\"comment\">// \tfree(tmp);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Merge</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> tmp[], <span class=\"type\">int</span> len)</span><span class=\"comment\">//合并小组并排序</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (len<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;<span class=\"comment\">//i标识//左小组的第一个元素位置</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> j = mid + <span class=\"number\">1</span>;<span class=\"comment\">//j标识//右小组的第一个元素位置</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> k = <span class=\"number\">0</span>;<span class=\"comment\">//tmp当前小组存放的起始位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; mid + <span class=\"number\">1</span> &amp;&amp; j &lt; len)<span class=\"comment\">//左小组越界或右小组越界才能退出</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &lt;= arr[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp[k++] = arr[i++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmp[k++] = arr[j++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt; len)<span class=\"comment\">//如果右边小组没有越界</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp[k++] = arr[j++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; mid + <span class=\"number\">1</span>)<span class=\"comment\">//如果左边小组没有越界</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp[k++] = arr[i++];</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//哦哦就是补齐了，把数组放到新的那个临时数组中去了</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarr[i] = tmp[i];</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//至此，原来的数组已经排序完毕</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeS</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> tmp[], <span class=\"type\">int</span> len)</span><span class=\"comment\">//划分小组，现在没有end.</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid = (len<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tMergeS(arr, tmp, mid+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tMergeS(arr+mid+<span class=\"number\">1</span>, tmp+mid+<span class=\"number\">1</span>, len-mid<span class=\"number\">-1</span>);<span class=\"comment\">//自我递归调用</span></span><br><span class=\"line\">\t\tMerge(arr, tmp,  len);<span class=\"comment\">//现在就全部排号</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">//就是递归调用呗</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeSort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *tmp = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>)*len);<span class=\"comment\">//开了一个排序后结果保存的临时数组</span></span><br><span class=\"line\">\tMergeS(arr, tmp, len);<span class=\"comment\">//嵌套调用</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> data[num] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   srand((<span class=\"type\">unsigned</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a = rand() % num;</span><br><span class=\"line\">      data[i] = a;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>, data[i]);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">   MergeSort(data, <span class=\"keyword\">sizeof</span>(data) / <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>, data[i]);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"归并排序","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"二分查找","date":"2022-11-19T04:01:43.000Z","path":"二分查找/","content":"<p><strong>代码如下:</strong><span id=\"more\"></span></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> num 1000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">=======</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class=\"number\">8672</span>cae (first)</span><br><span class=\"line\"><span class=\"type\">void</span> Insert_sort(<span class=\"type\">int</span> *data, <span class=\"type\">int</span> szie)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>; i &lt; szie - <span class=\"number\">1</span>; i++, j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tem_i = i;</span><br><span class=\"line\">        <span class=\"type\">int</span> tem_j = j;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tem_i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[tem_i] &gt; data[tem_j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> tem = data[tem_j];</span><br><span class=\"line\">                data[tem_j] = data[tem_i];</span><br><span class=\"line\">                data[tem_i] = tem;</span><br><span class=\"line\">                tem_j--;</span><br><span class=\"line\">                tem_i--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//前面数据已有顺序，跳出循环。</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// int dichotomy(int *data, int target, int size)//递归</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (!data || !size)</span></span><br><span class=\"line\"><span class=\"comment\">//         return -1;</span></span><br><span class=\"line\"><span class=\"comment\">//     int index = size - 1;</span></span><br><span class=\"line\"><span class=\"comment\">//     int mid = index / 2;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (target == data[mid])</span></span><br><span class=\"line\"><span class=\"comment\">//         return mid; //递归出口</span></span><br><span class=\"line\"><span class=\"comment\">//     if (mid == 0)         //递归出口</span></span><br><span class=\"line\"><span class=\"comment\">//         return -1;</span></span><br><span class=\"line\"><span class=\"comment\">//     if (target &gt; data[mid])</span></span><br><span class=\"line\"><span class=\"comment\">//         dichotomy(data + mid + 1, target, size - mid - 1);//排除mid</span></span><br><span class=\"line\"><span class=\"comment\">//     else</span></span><br><span class=\"line\"><span class=\"comment\">//         dichotomy(data, target, mid);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">dichotomy</span><span class=\"params\">(<span class=\"type\">int</span> *data, <span class=\"type\">int</span> target, <span class=\"type\">int</span> size)</span> <span class=\"comment\">//迭代</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data || !size)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> low = <span class=\"number\">0</span>, high = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) <span class=\"comment\">// x相等时数组只有一个元素</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = low + (high - low) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data[mid] == target)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; data[mid]) <span class=\"comment\">//排除mid</span></span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    srand((<span class=\"type\">unsigned</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> data[num] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">        data[i] = rand() % num;</span><br><span class=\"line\">    Insert_sort(data, <span class=\"keyword\">sizeof</span>(data) / <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a = rand() % num;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Rand query target: %d\\n&quot;</span>, a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> result = dichotomy(data, a, <span class=\"keyword\">sizeof</span>(data) / <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Query results:not exist&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Query results index: %d\\n&quot;</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"二分查找","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"栈、队列","date":"2022-11-17T12:47:48.000Z","path":"栈、队列/","content":"<p><strong>C语言实现代码：</strong><span id=\"more\"></span></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">/* data */</span></span><br><span class=\"line\">   <span class=\"type\">int</span> data;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"built_in\">list</span> **head, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (*head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">//初始化头部</span></span><br><span class=\"line\">      *head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">      (*head)-&gt;data = data;</span><br><span class=\"line\">      (*head)-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125; <span class=\"comment\">//单独处理头节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">list</span> *next = *head;</span><br><span class=\"line\">   <span class=\"comment\">// while(next-&gt;next!=NULL)//尾部插入</span></span><br><span class=\"line\">   <span class=\"comment\">//  next = next -&gt;next;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   *head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">   (*head)-&gt;data = data;</span><br><span class=\"line\">   (*head)-&gt;next = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">list</span> *<span class=\"title function_\">pop</span><span class=\"params\">(<span class=\"built_in\">list</span> **head)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">/*队列*/</span></span><br><span class=\"line\">   <span class=\"comment\">// if(*head==NULL)</span></span><br><span class=\"line\">   <span class=\"comment\">//    return NULL;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//</span></span><br><span class=\"line\">   <span class=\"comment\">// list  *next = *head;</span></span><br><span class=\"line\">   <span class=\"comment\">// if((*head)-&gt;next==NULL)&#123;//处理队列中只有一个元素的情况</span></span><br><span class=\"line\">   <span class=\"comment\">//    *head  = NULL;</span></span><br><span class=\"line\">   <span class=\"comment\">//    return next;</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// list *pre;</span></span><br><span class=\"line\">   <span class=\"comment\">//  while(next-&gt;next!=NULL)&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//    pre = next;</span></span><br><span class=\"line\">   <span class=\"comment\">//    next = next -&gt;next;</span></span><br><span class=\"line\">   <span class=\"comment\">//  &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">//  pre-&gt;next = NULL;</span></span><br><span class=\"line\">   <span class=\"comment\">//  return next;</span></span><br><span class=\"line\">   <span class=\"comment\">/*栈*/</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (*head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *temp = *head;</span><br><span class=\"line\">   *head = (*head)-&gt;next;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_list</span><span class=\"params\">(<span class=\"built_in\">list</span> **head)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (*head != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">list</span> *next = *head;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, next-&gt;data);</span><br><span class=\"line\">         next = next-&gt;next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> **head = &amp;p;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">      push(head, i);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">10</span>; i &lt; <span class=\"number\">20</span>; i++)</span><br><span class=\"line\">      push(head, i);</span><br><span class=\"line\">   print_list(head);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">list</span> *temp = pop(head);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (temp)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pop:%d &quot;</span>, temp-&gt;data);</span><br><span class=\"line\">         <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">         temp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"栈、队列","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"链表","date":"2022-11-17T09:12:07.000Z","path":"链表/","content":"<p>链表有两种写法，一种是头节点为空，另一种是头节点非空。<br>\n<strong>1.头节点为空</strong><br>\n头节点为空时不需要考虑遇到头节点的情况，相比节点为非空的情况：优点是可以提高运行效率，缺点是浪费一个头节点的空间。<span id=\"more\"></span><br>\n实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">/* data */</span></span><br><span class=\"line\">   <span class=\"type\">int</span> data;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">list</span> *<span class=\"title function_\">creat</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *head = head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">list</span>)); <span class=\"comment\">//头节点为空</span></span><br><span class=\"line\">   head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add_data</span><span class=\"params\">(<span class=\"built_in\">list</span> *head, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *next = head;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (next-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      next = next-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">   next-&gt;next = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">   next-&gt;next-&gt;data = data;</span><br><span class=\"line\">   next-&gt;next-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">delete</span> <span class=\"params\">(<span class=\"built_in\">list</span> *head, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *pre = head;</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *next = head-&gt;next;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data == next-&gt;data)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (next-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            pre-&gt;next = next-&gt;next;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            pre-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      pre = next;</span><br><span class=\"line\">      next = next-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_list</span><span class=\"params\">(<span class=\"built_in\">list</span> *head)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (head-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;clmjjjjj&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">list</span> *next = head-&gt;next;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, next-&gt;data);</span><br><span class=\"line\">      next = next-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">list</span> *head = creat();</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">      add_data(head, i);</span><br><span class=\"line\"></span><br><span class=\"line\">   print_list(head);</span><br><span class=\"line\">   delete (head, <span class=\"number\">5</span>);</span><br><span class=\"line\">   print_list(head);</span><br><span class=\"line\">   delete (head, <span class=\"number\">9</span>);</span><br><span class=\"line\">   print_list(head);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">      delete (head, i);</span><br><span class=\"line\"></span><br><span class=\"line\">   print_list(head);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.头节点非空</strong><br>\n头节点非空时需要考虑遇到头节点的情况，相比节点为空的情况：优点是可以节省空间，缺点是效率更低。<br>\n实现如下：</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add_data</span><span class=\"params\">(<span class=\"built_in\">list</span> **head, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化头部</span></span><br><span class=\"line\">        *head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">        (*head)-&gt;data = data;</span><br><span class=\"line\">        (*head)-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"comment\">//单独处理头节点</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span> *next = *head;</span><br><span class=\"line\">    <span class=\"comment\">/*尾部插入*/</span></span><br><span class=\"line\">    <span class=\"comment\">// while(next-&gt;next!=NULL)</span></span><br><span class=\"line\">    <span class=\"comment\">//  next = next -&gt;next;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  next-&gt;next = malloc(sizeof(list));\\</span></span><br><span class=\"line\"><span class=\"comment\">   //  next-&gt;next-&gt;data = data;</span></span><br><span class=\"line\">    <span class=\"comment\">//  next-&gt;next-&gt;next = NULL;</span></span><br><span class=\"line\">    <span class=\"comment\">/*头部插入*/</span></span><br><span class=\"line\">    *head = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">    (*head)-&gt;data = data;</span><br><span class=\"line\">    (*head)-&gt;next = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">convetr</span><span class=\"params\">(<span class=\"built_in\">list</span> **head)</span></span><br><span class=\"line\">&#123; <span class=\"comment\">//反转链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!*head)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(*head)-&gt;next) <span class=\"comment\">//只有一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *pre = *head;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *next = pre-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *tem = pre-&gt;next-&gt;next;</span><br><span class=\"line\">    pre-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tem)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next-&gt;next = pre;</span><br><span class=\"line\">        pre = next;</span><br><span class=\"line\">        next = tem;</span><br><span class=\"line\">        tem = tem-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next-&gt;next = pre;</span><br><span class=\"line\">    *head = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">delete</span> <span class=\"params\">(<span class=\"built_in\">list</span> **head, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*head == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((*head)-&gt;data == data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span> *temp = *head;</span><br><span class=\"line\">        *head = (*head)-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *pre = *head;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *next = (*head)-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data == next-&gt;data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre-&gt;next = next-&gt;next;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(next);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pre-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(next);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = next;</span><br><span class=\"line\">        next = next-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_list</span><span class=\"params\">(<span class=\"built_in\">list</span> **head)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*head != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span> *next = *head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, next-&gt;data);</span><br><span class=\"line\">            next = next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> **head = &amp;p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        add_data(head, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    print_list(head);</span><br><span class=\"line\">    convetr(head);<span class=\"comment\">//反转链表</span></span><br><span class=\"line\">    delete (head, <span class=\"number\">5</span>);</span><br><span class=\"line\">    print_list(head);</span><br><span class=\"line\">    delete (head, <span class=\"number\">9</span>);</span><br><span class=\"line\">    convetr(head);</span><br><span class=\"line\">    print_list(head);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;<span class=\"number\">8</span> ; i++)</span><br><span class=\"line\">        delete (head, i);</span><br><span class=\"line\">    add_data(head,<span class=\"number\">9</span>);</span><br><span class=\"line\">    convetr(head);</span><br><span class=\"line\">    print_list(head);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"链表","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"进程间通信-共享内存","date":"2022-11-16T16:01:57.000Z","path":"进程间通信-共享内存/","content":"<p><strong>相关函数</strong><br>\n用到的函数：shmget/shmat/shmdt/shmctl头文件均为：#include &lt;sys/ipc.h&gt;#include &lt;sys/shm.h&gt;<span id=\"more\"></span></p>\n<blockquote>\n<p>int shmget(key_t key, size_t size, int shmflg);<br>\n功能:获取共享内存段的ID，创建共享内存<br>\n参数:<br>\n@key IPC_PRIVATE 或 ftok()<br>\n@size 申请的共享内存段大小 [4k的倍数]<br>\n@shmflg IPC_CREAT | 0666 或 IPC_CREAT | IPC_EXCL<br>\n返回值：成功返回ID,失败返回-1</p>\n</blockquote>\n<blockquote>\n<p>void *shmat(int shmid, const void *shmaddr, int shmflg);<br>\n功能:映射共享内存到用户空间<br>\n参数:<br>\n@shmid 共享内存段ID<br>\n@shmaddr  NULL:系统自动完成映射<br>\n@shmflg SHM_RDONLY:只读   0:读写<br>\n返回值:成功返回映射后的地址，失败返回(void *)-1</p>\n</blockquote>\n<blockquote>\n<p>int shmdt(const void *shmaddr);<br>\n功能:撤销映射<br>\n参数:<br>\n@shmaddr 共享内存映射的地址<br>\n注意:当一个进程结束的时候，它映射共享内存，会自动撤销映射</p>\n</blockquote>\n<blockquote>\n<p>int shmctl(int shmid, int cmd, struct shmid_ds *buf);<br>\n//shmctl(shmid,IPC_RMID,NULL);<br>\n功能:根据命令控制共享内存，删除IPC对象<br>\n参数:<br>\n@shmid 共享内存段的ID<br>\n@cmd IPC_STAT[获取属性],IPC_SET[设置属性],IPC_RMID[删除IPC对象]<br>\n@buf 保存属性<br>\n返回值：成功返回0,失败返回 -1<br>\n注意:当我们调用shmctl删除共享内存的时候,并不会立即删除。只有当共享内存映射次数为0,才会删除共享内存对象<br>\n<strong>示例</strong></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发送方</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;head.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">key_t</span> key;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid;</span><br><span class=\"line\">    <span class=\"type\">char</span> * addr;</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((key = ftok(<span class=\"string\">&quot;/home/linux&quot;</span>, <span class=\"string\">&#x27;y&#x27;</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;ftok error&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2获取共享内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((shmid = shmget(key,<span class=\"number\">4096</span>,IPC_CREAT|<span class=\"number\">0664</span>))==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;shm get error&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    addr = shmat(shmid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(addr == (<span class=\"type\">void</span> *)<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;shm at error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        fgets(addr,<span class=\"number\">4096</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        addr[<span class=\"built_in\">strlen</span>(addr)<span class=\"number\">-1</span>]=<span class=\"string\">&#x27;\\0&#x27;</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//撤销映射</span></span><br><span class=\"line\">    shmdt(addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">```C</span><br><span class=\"line\"><span class=\"comment\">//接收方</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PRINT_ERR(msg) do&#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        perror(msg);\\</span></span><br><span class=\"line\"><span class=\"meta\">        return -1;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;while(0)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">key_t</span> key;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid;</span><br><span class=\"line\">    <span class=\"type\">char</span> * addr;</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((key = ftok(<span class=\"string\">&quot;/home/linux&quot;</span>, <span class=\"string\">&#x27;y&#x27;</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;ftok error&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2获取共享内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((shmid = shmget(key,<span class=\"number\">4096</span>,IPC_CREAT|<span class=\"number\">0664</span>))==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;shm get error&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    addr = shmat(shmid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(addr == (<span class=\"type\">void</span> *)<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;shm at error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;addr = %s\\n&quot;</span>,addr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//撤销映射</span></span><br><span class=\"line\">    shmdt(addr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"进程间通信-共享内存","categories":[{"name":"多进程","slug":"多进程","permalink":"http://example.com/categories/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"}],"tags":[{"name":"进程间通信","slug":"进程间通信","permalink":"http://example.com/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"}]},{"title":"链接(三)","date":"2022-11-16T15:59:12.000Z","path":"链接(三)/","content":"<h3 id=\"符号\">符号</h3>\n<p>要理解符号的解析过程，得先搞明白以下几点：<br>\n什么是符号<br>\n什么是符号的定义，什么是符号的引用<span id=\"more\"></span><br>\n链接符号的类型有哪些，各自有什么特点<br>\n符号表的结构<br>\n链接器对符号的解析规则<br>\n下面就来一步步搞明白这些点。</p>\n<p>符号就是其实程序中的变量名、函数名。</p>\n<p>符号的定义和引用，可见下图：<br>\n<img src=\"/img/%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8.png\" alt=\"\"><br>\n注意：局部变量temp分配在栈中，不会在函数外部被引用，因此不是符号定义。</p>\n<p>链接符号的类型</p>\n<p>每个可重定位目标模块m都有一个符号表，它包含了在m中定义和引用的符号。有三种链接器符号：</p>\n<p>Global symbols（模块内部定义的全局符号）<br>\n由模块m定义并能被其他模块引用的符号。例如，非static C函数和非static C全局变量<br>\n如，main.c 中的全局变量名buf</p>\n<p>External symbols（外部定义的全局符号）<br>\n由其他模块定义并被模块m引用的全局符号<br>\n如，main.c 中的函数名swap</p>\n<p>Local symbols（本模块的局部符号）<br>\n仅由模块m定义和引用的本地符号。例如，在模块m中定义的带static的C函数和全局变量<br>\n如，swap.c中的static变量名bufp1.<br>\n注意：链接器的局部符号不是指程序中的局部变量（分配在栈中的临时性变量），链接&gt;器不关心这种局部变量</p>\n<p>链接器的符号类型，示例如下：<br>\n<img src=\"/img/%E7%AC%A6%E5%8F%B7%E5%AE%9A%E4%B9%89.png\" alt=\"\"><br>\n目标文件中的符号表<br>\n目标文件的.symtab节记录着符号表信息，符号表示一个结构体数组，每个表项（16字节）的结构如下：<br>\n<img src=\"/img/%E7%AC%A6%E5%8F%B7%E8%A1%A8.png\" alt=\"\"><br>\n使用readelf -s 可查看目标文件的符号表信息，以上面的main.o和swap.o为例：<br>\n<img src=\"/img/%E7%AC%A6%E5%8F%B7%E6%9D%A1%E7%9B%AE1.png\" alt=\"\"></p>\n<p><img src=\"/img/%E7%AC%A6%E5%8F%B7%E6%9D%A1%E7%9B%AE2.png\" alt=\"\"><br>\n符号定义的本质</p>\n<p>符号定义的本质是：指被分配了存储空间。如果是函数名则指代码所在区；如果是变量名则指其所在的静态数据区。</p>\n<p>所有定义的符号的值就是其目标所在的首地址。</p>\n<p>因此，符号的解析就是将符号引用和符号定义建立关联后，将引用符号的地址重定位为相关联的符号定义的地址。</p>\n<p>全局符号的强、弱</p>\n<p>全局符号有强、弱的特性。</p>\n<p>强符号：函数名和已初始化的全局变量名是强符号。<br>\n弱符号：未初始化的全局变量名是弱符号。<br>\n举例如下：<br>\n<img src=\"/img/%E7%AC%A6%E5%8F%B7%E5%BC%BA%E5%BC%B1.png\" alt=\"\"><br>\n链接器对符号的解析规则<br>\n符号解析时，只能有一个确定的定义（即每个符号仅占一处存储空间）。<br>\n所以，如果碰到符号存在多重定义时，就得有相应的处理规则：<br>\n<img src=\"/img/%E5%BC%BA%E5%BC%B1%E7%AC%A6%E5%8F%B7.png\" alt=\"\"><br>\nRule 1：强符号不能多次定义<br>\n强符号只能被定义一次，否则链接错误。<br>\nRule 2：若一个符号被定义为一次强符号和多次弱符号，则按强符号定义为准。<br>\nRule 3：若有多个弱符号定义，则任选其中一个。<br>\n使用命令 gcc -fno-common链接时，会告诉链接器在遇到多个弱定义的全局符号时输出一条警告信息。</p>\n<p>下面是几个多重定义符号的解析示例：<br>\n<img src=\"/img/%E9%87%8D%E5%AE%9A%E4%B9%891.png\" alt=\"\"></p>\n<p><img src=\"/img/%E9%87%8D%E5%AE%9A%E4%B9%892.png\" alt=\"\"></p>\n<p><img src=\"/img/%E9%87%8D%E5%AE%9A%E4%B9%893.png\" alt=\"\"></p>\n<p><img src=\"/img/%E9%87%8D%E5%AE%9A%E4%B9%894.png\" alt=\"\"><br>\n关于全局符号的多重定义的问题：<br>\n尽量避免使用全局变量<br>\n一定要使用的话，就按以下规则使用<br>\n尽量使用本地变量（static）<br>\n全局变量要赋初值<br>\n外部全局变量要使用extern<br>\n多重定义全局变量会造成一些意想不到的错误，而且是默默发生的，编译系统不会警告，并会在程序执行很久后才能表现出来，且远离错误处。特别是在模块很多的大型软件中，这类错误很难修正。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"链接(三)","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"csapp","slug":"csapp","permalink":"http://example.com/tags/csapp/"}]},{"title":"进程间通信-消息队列","date":"2022-11-16T15:48:16.000Z","path":"进程间通信-消息队列/","content":"<p><strong>相关函数</strong><br>\n用到的函数：ftok/msgget/msgsnd/msgrcv/msgctl ;头文件均为：<span id=\"more\"></span>#include &lt;sys/ipc.h&gt;#include &lt;sys/msg.h&gt;</p>\n<blockquote>\n<p>key_t ftok(const char *pathname, int proj_id);<br>\n功能：获得key值<br>\n参数:<br>\n@pathname 已经存在的文件路径<br>\n@proj_id 获取这个整数的低8bit (key = proj_id,inode,st_dev)<br>\n返回值:成功返回 key值，失败返回-1<br>\n第二种方法:将key值指定为IPC_PRIVATE ,当IPC对象在亲缘关系进程通信的时候</p>\n</blockquote>\n<blockquote>\n<p>int msgget(key_t key, int msgflg);<br>\n功能：创建IPC对象<br>\n参数:<br>\n@key IPC_PRIVATE 或 ftok<br>\n@msgflg IPC_CREAT | 0666 或 IPC_CREAT | IPC_EXCL | 0666 (判断IPC对象是否存在)<br>\n返回值:成功返回ID，失败返回-1<br>\n注意:如果对应key值的IPC对象不存在，则创建，如果存在，直接返回IPC对象的ID</p>\n</blockquote>\n<blockquote>\n<p>int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);<br>\n功能：发送消息<br>\n参数：<br>\n@msqid 消息队列ID<br>\n@msgp 需要发送的消息存放的地址<br>\n@msgsz 消息正文的大小<br>\n@msgflg     0:阻塞的方式发送 IPC_NOWAIT:非阻塞方式调用<br>\n返回值:成功返回0，失败返回-1 (队列的大小限制MSGMNB 16384)</p>\n</blockquote>\n<blockquote>\n<p>消息结构体定义:<br>\ntypedef struct{<br>\nlong msg_type;   //消息类型必须在第一个位置，<br>\nchar mtxt[1024];<br>\n…<br>\n}msg_t;<br>\n正文大小:sizeof(msg_t) - sizeof(long)</p>\n</blockquote>\n<blockquote>\n<p>ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,int msgflg);<br>\n功能：接收消息<br>\n参数:<br>\n@msqid 消息队列ID<br>\n@msgp 存放接收到的消息<br>\n@msgsz 正文大小<br>\n@msgtyp 消息类型 ,  0: 总是从消息队列中提取第一个消息<br>\n@msgflg     0:阻塞的方式接收 IPC_NOWAIT:非阻塞方式调用<br>\n返回值：成功返回 接收消息正文大小，失败返回-1</p>\n</blockquote>\n<blockquote>\n<p>int msgctl(int msqid, int cmd, struct msqid_ds *buf);<br>\n功能：删除消息队列<br>\n参数:<br>\n@msgqid 消息队列<br>\n@cmd     IPC_RMID(删除消息队列)  IPC_SET(设置消息队列的属性信息) IPC_STAT(获取消息队列属性信息)<br>\n@buf 存放消息队列属性<br>\n返回值：成功返回0,失败返回-1</p>\n</blockquote>\n<p><strong>示例</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发送方</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/msg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> msg_type; <span class=\"comment\">//消息类型必须在第一个位置，</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"type\">char</span> sex;</span><br><span class=\"line\">&#125; <span class=\"type\">msg_t</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">key_t</span> key;</span><br><span class=\"line\">    <span class=\"type\">int</span> msgid;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 1.获取key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((key = ftok(<span class=\"string\">&quot;/home/linux&quot;</span>, <span class=\"string\">&#x27;y&#x27;</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;ftok error&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2获取消息队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((msgid = msgget(key, IPC_CREAT | <span class=\"number\">0664</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;msg get error&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">msg_t</span> m1 = &#123;<span class=\"number\">1</span>, <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;m&#x27;</span>&#125;;</span><br><span class=\"line\">    msgsnd(msgid, &amp;m1, <span class=\"keyword\">sizeof</span>(<span class=\"type\">msg_t</span>) - <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">msg_t</span> m2 = &#123;<span class=\"number\">2</span>, <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&#x27;m&#x27;</span>&#125;;</span><br><span class=\"line\">    msgsnd(msgid, &amp;m2, <span class=\"keyword\">sizeof</span>(<span class=\"type\">msg_t</span>) - <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">msg_t</span> m3 = &#123;<span class=\"number\">3</span>, <span class=\"string\">&quot;wangwu&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;w&#x27;</span>&#125;;</span><br><span class=\"line\">    msgsnd(msgid, &amp;m3, <span class=\"keyword\">sizeof</span>(<span class=\"type\">msg_t</span>) - <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收方</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/msg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> msg_type; <span class=\"comment\">//消息类型必须在第一个位置，</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"type\">char</span> sex;</span><br><span class=\"line\">&#125; <span class=\"type\">msg_t</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">key_t</span> key;</span><br><span class=\"line\">    <span class=\"type\">int</span> msgid;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 1.获取key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((key = ftok(<span class=\"string\">&quot;/home/linux&quot;</span>, <span class=\"string\">&#x27;y&#x27;</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;ftok error&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2获取消息队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((msgid = msgget(key, IPC_CREAT | <span class=\"number\">0664</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;msg get error&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">msg_t</span> msg;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        bzero(&amp;msg,<span class=\"keyword\">sizeof</span>(<span class=\"type\">msg_t</span>));</span><br><span class=\"line\">        msgrcv(msgid,&amp;msg,<span class=\"keyword\">sizeof</span>(<span class=\"type\">msg_t</span>)-<span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>),<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;name =%s,age = %d,sex = %c\\n&quot;</span>,</span><br><span class=\"line\">            msg.name,msg.age,msg.sex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"进程间通信-消息队列","categories":[{"name":"多进程","slug":"多进程","permalink":"http://example.com/categories/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"}],"tags":[{"name":"进程间通信","slug":"进程间通信","permalink":"http://example.com/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"}]},{"title":"进程间通信-有名管道","date":"2022-11-16T15:10:45.000Z","path":"进程间通信-有名管道/","content":"<p><strong>相关函数</strong><br>\n用到的函数：mkfifo;头文件为：#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;<span id=\"more\"></span></p>\n<blockquote>\n<p>int mkfifo(const char *pathname, mode_t mode)<br>\n功能：创建一个有名管道<br>\n参数：<br>\n@pathname:路径及有名管道的文件<br>\n管道文件不是在磁盘上存储的，管道文件是在内存上存储的。路径在系统上起到唯一标识作用。<br>\n管道文件的大小永远都是0，不管有没有向里面写数据，只起到标识作用<br>\n@mode:管道文件的权限，管道文件也是文件。也有权限管理。<br>\n返回值：成功返回0，失败返回-1置位错误码</p>\n</blockquote>\n<p>当文件创建成功之后，可以通过open read write close进行通信<br>\n<strong>示例代码:</strong><br>\n<strong>发送方</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FIFO <span class=\"string\">&quot;./fifo1&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PRINT_ERR(msg) do&#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        perror(msg);\\</span></span><br><span class=\"line\"><span class=\"meta\">        return -1;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;while(0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mkfifo(FIFO, <span class=\"number\">0664</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;make fifo error&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((fd = open(FIFO,O_WRONLY))==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;open error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        fgets(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        buf[<span class=\"built_in\">strlen</span>(buf) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        write(fd,buf,<span class=\"built_in\">strlen</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(buf, <span class=\"string\">&quot;quit&quot;</span>, <span class=\"number\">4</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>接收方</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FIFO <span class=\"string\">&quot;./fifo1&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;strings.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PRINT_ERR(msg) do&#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        perror(msg);\\</span></span><br><span class=\"line\"><span class=\"meta\">        return -1;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;while(0)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((fd = open(FIFO,O_RDONLY))==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;open error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        bzero(buf,<span class=\"keyword\">sizeof</span>(buf));<span class=\"comment\">//填充0</span></span><br><span class=\"line\">        read(fd,buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(buf, <span class=\"string\">&quot;quit&quot;</span>, <span class=\"number\">4</span>) == <span class=\"number\">0</span>)<span class=\"comment\">//比较字符串，第三个参数为只比较前四个。</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf = %s\\n&quot;</span>,buf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"进程间通信-有名管道","categories":[{"name":"多进程","slug":"多进程","permalink":"http://example.com/categories/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"}],"tags":[{"name":"进程间通信","slug":"进程间通信","permalink":"http://example.com/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"}]},{"title":"冒泡、插入、快速排序","date":"2022-11-16T13:55:57.000Z","path":"冒泡、插入、快速排序/","content":"<p><strong>代码如下：</strong> <span id=\"more\"></span></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// void Bubbl_sort(int *data, int size)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; //原始冒泡</span></span><br><span class=\"line\"><span class=\"comment\">//    for (int i = 0; i &lt; size - 1; i++)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       for (int i = 0; i &lt; size - 1; i++)</span></span><br><span class=\"line\"><span class=\"comment\">//       &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          if (data[i] &gt; data[i + 1])</span></span><br><span class=\"line\"><span class=\"comment\">//          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             int tem = data[i + 1];</span></span><br><span class=\"line\"><span class=\"comment\">//             data[i + 1] = data[i];</span></span><br><span class=\"line\"><span class=\"comment\">//             data[i] = tem;</span></span><br><span class=\"line\"><span class=\"comment\">//          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// void Bubbl_sort(int *data, int size)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; //减少重复遍历次数</span></span><br><span class=\"line\"><span class=\"comment\">//    for (int i = 0; i &lt; size - 1; i++)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       for (int j = 0; j &lt; size - 1 - i; j++)</span></span><br><span class=\"line\"><span class=\"comment\">//       &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          if (data[j] &gt; data[j + 1])</span></span><br><span class=\"line\"><span class=\"comment\">//          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             int tem = data[j + 1];</span></span><br><span class=\"line\"><span class=\"comment\">//             data[j + 1] = data[j];</span></span><br><span class=\"line\"><span class=\"comment\">//             data[j] = tem;</span></span><br><span class=\"line\"><span class=\"comment\">//          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Bubbl_sort</span><span class=\"params\">(<span class=\"type\">int</span> *data, <span class=\"type\">int</span> size)</span></span><br><span class=\"line\">&#123; <span class=\"comment\">//减少交换次数</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> falg = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; size - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (data[falg] &lt; data[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">            falg = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"type\">int</span> tem = data[size - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">      data[size - i - <span class=\"number\">1</span>] = data[falg];</span><br><span class=\"line\">      data[falg] = tem;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Insert_sort</span><span class=\"params\">(<span class=\"type\">int</span> *data, <span class=\"type\">int</span> szie)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>; i &lt; szie - <span class=\"number\">1</span>; i++, j++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> tem_i = i;</span><br><span class=\"line\">      <span class=\"type\">int</span> tem_j = j;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (tem_i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (data[tem_i] &gt; data[tem_j])</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tem = data[tem_j];</span><br><span class=\"line\">            data[tem_j] = data[tem_i];</span><br><span class=\"line\">            data[tem_i] = tem;</span><br><span class=\"line\">            tem_j--;</span><br><span class=\"line\">            tem_i--;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"comment\">//前面数据已有顺序，跳出循环。</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">shell_sort</span><span class=\"params\">(<span class=\"type\">int</span> *data, <span class=\"type\">int</span> szie)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> gap = (szie<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gap&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = gap; i &lt; szie - <span class=\"number\">1</span>; i= gap+i, j= gap+j)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> tem_i = i;</span><br><span class=\"line\">      <span class=\"type\">int</span> tem_j = j;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (tem_i &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (data[tem_j]&lt;data[tem_i])</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tem = data[tem_i];</span><br><span class=\"line\">            data[tem_i] = data[tem_j];</span><br><span class=\"line\">            data[tem_j] = tem;</span><br><span class=\"line\">            tem_j = tem_j - gap;</span><br><span class=\"line\">            tem_i = tem_i -gap;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"comment\">//前面数据已有顺序，跳出循环。</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   gap = gap/<span class=\"number\">2</span>;<span class=\"comment\">//分组内待排序个数是偶数时最后一个数不在排序范围内，当gap = 1时再对这个数进行排序进行排序。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void q_sort(int *data, int size) //内层反向逻辑</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    int left = 0;</span></span><br><span class=\"line\"><span class=\"comment\">//    int right = size - 1;</span></span><br><span class=\"line\"><span class=\"comment\">//    int key = data[left];</span></span><br><span class=\"line\"><span class=\"comment\">//    if (size &lt;= 0)</span></span><br><span class=\"line\"><span class=\"comment\">//       return;</span></span><br><span class=\"line\"><span class=\"comment\">//    while (left &lt; right) //当left = rihght时退出循环</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       while ((left &lt; right) &amp;&amp; (data[right] &gt;= key)) //当left == rihght时退出循环，方向逻辑</span></span><br><span class=\"line\"><span class=\"comment\">//          right--;</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">//       data[left] = data[right];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//       while ((left &lt; right) &amp;&amp; (data[left] &lt;= key)) //当left == rihght时退出循环</span></span><br><span class=\"line\"><span class=\"comment\">//          left++;</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">//       data[right] = data[left];</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    data[right] = key; //此时left == rihgh</span></span><br><span class=\"line\"><span class=\"comment\">//    q_sort(data, left);</span></span><br><span class=\"line\"><span class=\"comment\">//    q_sort(data + left + 1, size - left - 1);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">q_sort</span><span class=\"params\">(<span class=\"type\">int</span> *data, <span class=\"type\">int</span> size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      Insert_sort(data, size); <span class=\"comment\">//插入排序优化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">int</span> right = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"type\">int</span> ran = rand() % size;</span><br><span class=\"line\">   <span class=\"type\">int</span> tem = data[left];</span><br><span class=\"line\">   data[left] = data[ran]; <span class=\"comment\">//随机基准值优化</span></span><br><span class=\"line\">   data[ran] = tem;</span><br><span class=\"line\">   <span class=\"type\">int</span> key = data[left];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (left &lt; right) <span class=\"comment\">//当left ==rihght时退出循环</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (left &lt; right) <span class=\"comment\">//正向逻辑</span></span><br><span class=\"line\">      &#123;                    <span class=\"comment\">//当left == rihght时退出循环</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (data[right] &lt;= key)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            data[left++] = data[right];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (left &lt; right) <span class=\"comment\">//当left == rihght时退出循环</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (data[left] &gt;= key)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            data[right--] = data[left];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">            left++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   data[right] = key; <span class=\"comment\">//此时left == rihgh</span></span><br><span class=\"line\">   q_sort(data, left);</span><br><span class=\"line\">   q_sort(data + left + <span class=\"number\">1</span>, size - left - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> num 13</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> data[num] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   srand((<span class=\"type\">unsigned</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a = rand() % num;</span><br><span class=\"line\">      data[i] = a;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>, data[i]);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">   shell_sort(data, <span class=\"keyword\">sizeof</span>(data) / <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d&quot;</span>, data[i]);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"冒泡、插入、快速排序","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"进程间通信-无名管道","date":"2022-11-16T13:55:57.000Z","path":"进程间通信-无名管道/","content":"<p><strong>1.管道的通信方式：</strong></p>\n<blockquote>\n<p>半双工通信; 在同一时间点内只能一端发另外一端收    A------&gt;B B-----&gt;A。管道缓冲区大小<span id=\"more\"></span>由内核设置。</p>\n</blockquote>\n<p><strong>2.管道读写特点:</strong></p>\n<blockquote>\n<p>读：有多少读多少，没有则阻塞等待；写：写慢缓冲区为止。每一端均有读写功能，一端读时需要先关闭写，写时需要先关闭读;另一端同理。<br>\n用到的函数：pipe;头文件：#include &lt;unistd.h&gt;<br>\nint pipe(int pipefd[2])<br>\n功能：创建一个无名管道<br>\n参数：<br>\n@pipefd:返回的是读写段的文件描述符<br>\n返回值：成功返回0，失败返回-1置位错误码</p>\n</blockquote>\n<p><strong>示例代码:</strong></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PRINT_ERR(msg) do&#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        perror(msg);\\</span></span><br><span class=\"line\"><span class=\"meta\">        return -1;\\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;while(0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"comment\">/*创建管道的读写，pipefd[0]为读取，pipefd[1]为写。</span></span><br><span class=\"line\"><span class=\"comment\">    fork后，父进程是一端，子进程是另一端,但两端均用pipefd[2]进行操作读写。*/</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pipefd[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\">    <span class=\"comment\">//1.创建管道</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pipe(pipefd) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;pipe create error&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//2.创建进程</span></span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        PRINT_ERR(<span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">        close(pipefd[<span class=\"number\">0</span>]); <span class=\"comment\">//关闭读取端</span></span><br><span class=\"line\">        <span class=\"comment\">//1.子进程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            fgets(buf,<span class=\"keyword\">sizeof</span>(buf),<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">            buf[<span class=\"built_in\">strlen</span>(buf)<span class=\"number\">-1</span>]=<span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">            write(pipefd[<span class=\"number\">1</span>],buf,<span class=\"built_in\">strlen</span>(buf));</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(buf,<span class=\"string\">&quot;quit&quot;</span>,<span class=\"number\">4</span>)==<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;子进程退出了\\n&quot;</span>);</span><br><span class=\"line\">        close(pipefd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        close(pipefd[<span class=\"number\">1</span>]); <span class=\"comment\">//关闭写端口</span></span><br><span class=\"line\">        <span class=\"comment\">//2.父进程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf)); <span class=\"comment\">//bzero</span></span><br><span class=\"line\">            read(pipefd[<span class=\"number\">0</span>],buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(buf,<span class=\"string\">&quot;quit&quot;</span>,<span class=\"number\">4</span>)==<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent buf = %s\\n&quot;</span>,buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;父进程退出了\\n&quot;</span>);</span><br><span class=\"line\">        close(pipefd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"进程间通信-无名管道","categories":[{"name":"多进程","slug":"多进程","permalink":"http://example.com/categories/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"}],"tags":[{"name":"进程间通信","slug":"进程间通信","permalink":"http://example.com/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"}]},{"title":"链接（二）","date":"2022-11-15T15:45:03.000Z","path":"链接(二)/","content":"<h3 id=\"ELF目标文件。\">ELF目标文件。</h3>\n<p>ELF的目标文件分为三类：</p>\n<span id=\"more\"></span>\n<p>可重定位目标文件（.o）<br>\n其代码和数据可和其他可重定位文件合并为可执行文件<br>\n每个 .o 文件由对应的 .c 文件生成<br>\n每个 .o 文件的代码和数据地址都是从0开始的偏移<br>\n可执行目标文件（默认为a.out）<br>\n包含的代码和数据可以被直接复制到内存并执行<br>\n代码和数据的地址是虚拟地址空间中的地址<br>\n共享的目标文件（.so 共享库）<br>\n特殊的可重定位目标文件，能在装载到内存或运行时自动被链接，称为共享库文件<br>\n可通过objdump命令对比可重定位目标文件和可执行目标文件的不同：<br>\n<img src=\"/img/%E6%B1%87%E7%BC%96.png\" alt=\"\"><br>\n可以看到，确实可重定位目标文件中的地址是从0开始的，而可执行目标文件中的地址是虚拟地址空间中的地址。<br>\n接下来介绍ELF文件的两种视图：<br>\n链接视图：可重定位文件（Relocatable object files）<br>\n执行视图：可执行目标文件（Executable object files）<br>\n<img src=\"/img/%E8%A7%86%E5%9B%BE.png\" alt=\"\"><br>\n链接视图 —— 可重定位目标文件<br>\n来看一个简单的C代码及其所生成的可重定位目标文件的关系图：<br>\n<img src=\"/img/%E9%87%8D%E5%AE%9A%E4%BD%8D.png\" alt=\"\"><br>\n如上图，编译后的代码部分放到 .text节，已初始化的全局变量和已初始化的静态变量会放到 .data节，未初始化的全局变量和未初始化的静态变量会放到 .bss节。<br>\n实际上，为了进行链接，可重定位目标文件还需要许多其他信息，如符号表、重定位信息等。这些后面会陆续介绍。</p>\n<p>在这里要特别说明一下 .bss节。该节在可重定位目标文件中并不占用空间，只是在节头表相应的表项中说明要为 .bss节预留多大的空间。</p>\n<p>可重定位目标文件中包含有很多的节，格式如下图：<br>\n<img src=\"/img/%E6%AE%B5%E4%BD%8D.png\" alt=\"\"><br>\n其中：<br>\nELF头<br>\n包括16字节的标识信息、文件类型（.o，exec，.so）、机器类型（如Intel 80386）、节头表的偏移、节头表的表项大小及表项个数。<br>\n.text节<br>\n编译后的代码部分。<br>\n.rodata节<br>\n只读数据，如 printf用到的格式串、switch跳转表等。<br>\n.data节<br>\n已初始化的全局变量和静态变量。<br>\n.bss节<br>\n未初始化全局变量和静态变量，仅是占位符，不占据任何磁盘空间。区分初始化和非初始化是为了空间效率。<br>\n.symtab节<br>\n存放函数和全局变量（符号表）的信息，它不包括局部变量。<br>\n.rel.text节<br>\n.text节的重定位信息，用于重新修改代码段的指令中的地址信息。<br>\n.rel.data节<br>\n.data节的重定位信息，用于对被模块使用或定义的全局变量进行重定位的信息。<br>\n.debug节<br>\n调试用的符号表（gcc -g）<br>\n.strtab节<br>\n包含 .symtab节和 .debug节中的符号及节名<br>\n节头表（Section header table）<br>\n包含每个节的节名在.strtab节中的偏移、节的偏移和节的大小.<br>\n下边分别举例讲一下ELF头和节头表：<br>\nELF头位于ELF文件的开始，其包含了文件结构的说明信息。其结构体定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> EI_NIDENT 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> e_ident[EI_NIDENT];              </span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_type;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_machine;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>      e_version;</span><br><span class=\"line\">    ElfN_Addr    e_entry;</span><br><span class=\"line\">    ElfN_Off      e_phoff;</span><br><span class=\"line\">    ElfN_Off      e_shoff;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>      e_flags;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_ehsize;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_phentsize;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_phnum;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_shentsize;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_shnum;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>      e_shstrndx;</span><br><span class=\"line\">&#125; ElfN_Ehdr;</span><br></pre></td></tr></table></figure>\n<p>用readelf -h 查看ELF头。下表是ELF头中各个成员的含义与readelf输出结果的对照表：</p>\n<p>成员\treadelf输出结果及含义<br>\ne_ident\tMagic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00<br>\nClass: ELF32<br>\nData: 2’s complement, little endian<br>\nVersion: 1 (current)<br>\nOS/ABI: UNIX - System V<br>\nABI Version: 0<br>\ne_type\tType: REL（Relocatable file）<br>\nELF文件类型<br>\ne_machine\tMachine: Intel 80386<br>\nELF文件的CPU平台属性，相关常量以EM_开头<br>\ne_version\tVersion: 0x1<br>\nELF版本号。一般为常数1<br>\ne_entry\tEntry point address: 0x0<br>\n入口地址，规定ELF程序的入口虚拟地址，操作系统在加载完该程序后从这个地址开始执行进程的指令。可重定位目标文件一般没有入口地址，则这个值为0<br>\ne_phoff\tStart of program header: 0 (bytes into file)<br>\n程序头表在文件中的偏移，可重定位目标文件不存在程序头表，故该值为0<br>\ne_shoff\tStart of section header: 280(bytes into file)<br>\n节头表在文件中的偏移<br>\ne_flags\tFlags: 0x0<br>\nELF标志位，用来标识一些ELF文件平台相关的属性，相关常量的格式一般为EF_machine_flag，machine为平台，flag为标志<br>\ne_ehsize\tSize of this header: 52(bytes)<br>\n即ELF文件头本身的大小<br>\ne_phentsize\tSize of program headers: 0(bytes)<br>\n程序头表表项的大小<br>\ne_phnum\tNumber of program headers: 0<br>\n程序头表表项的数目<br>\ne_shentsize\tSize of section headers: 40(bytes)<br>\n节表表项的大小<br>\ne_shnum\tNumber of section headers: 11<br>\n节表表项的数目<br>\ne_shstrndx\tSection header string table index: 8<br>\n节表字符串表在节头表中的下标<br>\n-------------------------------------- 节头表（Section Header Table） ----------------------<br>\n除了ELF头之外，节头表是ELF可重定位目标文件中最重要的部分内容。<br>\n它描述了每个节的节名、在文件中的偏移、大小、访问属性、对齐方式等。其32位结构定义如下（每项占40字节）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    Elf32_Word sh_name;   <span class=\"comment\">//节名字符串在.strtab中的偏移</span></span><br><span class=\"line\">    Elf32_Word sh_type;   <span class=\"comment\">//节类型：无效/代码或数据/符号/字符串/…</span></span><br><span class=\"line\">    Elf32_Word sh_flags;  <span class=\"comment\">//节标志：该节在虚拟空间中的访问属性</span></span><br><span class=\"line\">    Elf32_Addr sh_addr;   <span class=\"comment\">//虚拟地址：若可被加载，则对应虚拟地址</span></span><br><span class=\"line\">    Elf32_Off sh_offset;  <span class=\"comment\">//在文件中的偏移地址，对.bss节而言则无意义</span></span><br><span class=\"line\">    Elf32_Word sh_size;   <span class=\"comment\">//节在文件中所占的长度</span></span><br><span class=\"line\">    Elf32_Word sh_link;   <span class=\"comment\">//sh_link和sh_info用于与链接相关的节（如</span></span><br><span class=\"line\">    Elf32_Word sh_info;   <span class=\"comment\">//     .rel.text节、.rel.data节、.symtab节等）   </span></span><br><span class=\"line\">    Elf32_Word sh_addralign; <span class=\"comment\">//节的对齐要求</span></span><br><span class=\"line\">    Elf32_Word sh_entsize;   <span class=\"comment\">//节中每个表项的长度，0表示无固定长度表项</span></span><br><span class=\"line\">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure>\n<p>使用 readelf -S命令查看节头表，示例如下：<br>\n<img src=\"/img/%E8%8A%82%E5%A4%B41.png\" alt=\"\"></p>\n<p><img src=\"/img/%E8%8A%82%E5%A4%B42.png\" alt=\"\"><br>\nA（alloc）标志表示该节将进程空间中必须要分配空间。可以看到，.text、.data、.bss、.rodata节都有这个标志。<br>\n执行视图 —— 可执行目标文件<br>\n再来看ELF的执行视图，也就是可执行目标文件的格式：<br>\n<img src=\"/img/%E7%9B%AE%E6%A0%87.png\" alt=\"\"><br>\n它与可重定位目标文件稍有不同：<br>\nELF文件头中的字段e_entry给出了执行程序时第一条指令的地址，而在可重定位目标文件中，此字段为0；程序头表的偏移e_poff和大小e_phentsiz和程序头表项的个数e_phnum不为0；<br>\n多了一个程序头表，也称为段头表（segment header table），是一个结构体数组；<br>\n多了一个 .init节，用于定义 _init函数，该函数用于在可执行目标文件开始执行时的初始化工作。<br>\n少了两个 .rel节（.rel.text和.rel.data），因为可执行目标文件已经在链接的过程中完成了重定位，已无须重定位。<br>\n使用readelf -h 来看可执行目标文件的ELF头，示例如下<br>\n<img src=\"/img/elf.png\" alt=\"\"><br>\n程序头表描述的可执行文件中的节（section）与虚拟地址空间中的存储段（segment）之间的映射关系。</p>\n<p>程序头表的结构定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    Elf32_Word p_type;      <span class=\"comment\">//段类型</span></span><br><span class=\"line\">    Elf32_Off p_offset;        <span class=\"comment\">//该段在文件中的起始偏移</span></span><br><span class=\"line\">    Elf32_Addr p_vaddr;     <span class=\"comment\">//该段的虚拟地址</span></span><br><span class=\"line\">    Elf32_Addr p_paddr;     <span class=\"comment\">//该段的物理地址</span></span><br><span class=\"line\">    Elf32_Word p_filesz;     <span class=\"comment\">//该段在文件中的大小</span></span><br><span class=\"line\">    Elf32_Word p_memsz;  <span class=\"comment\">//该段在内存中的大小</span></span><br><span class=\"line\">    Elf32_Word p_flags;     <span class=\"comment\">//段的标志位，表示访问权限（Read|Write|Exec）</span></span><br><span class=\"line\">    Elf32_Word p_align;     <span class=\"comment\">//段在内存中的对齐要求</span></span><br><span class=\"line\">&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure>\n<p>下图是用readelf -l 查看到的某可执行目标文件的程序头表：</p>\n<p><img src=\"/img/%E7%A8%8B%E5%BA%8F%E5%A4%B4%E8%A1%A8.png\" alt=\"\"><br>\nType为Load表示可装入内存的段。<br>\n第一个可装入段：第0x00000~0x004d3字节（包括ELF头、程序头表、.init节、.text节和.rodata节），映射到虚拟地址0x8048000开始长度为0x4d4字节的区域，按0x1000=4KB对齐，具有只读/执行权限（Flg=RE），是只读代码段。<br>\n第二个可装入段：第0x000f0c~开始长度为0x108字节的 .data节，映射到虚拟地址0x8049f0c开始长度为0x110字节的存储区域，在0x110=272B存储区中，前0x108=264B用 .data节内容初始化，后面272-264=8B对应.bss节，初始化为0，按0x1000=64K对齐，具有可读可写权限（Flg=RW），是可读写数据段。</p>\n<p>映射到虚拟地址空间中如图：</p>\n<p><img src=\"/img/%E7%A9%BA%E9%97%B4.png\" alt=\"\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"链接(二)","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"csapp","slug":"csapp","permalink":"http://example.com/tags/csapp/"}]},{"title":"虚拟地址","date":"2022-11-14T19:40:44.000Z","path":"虚拟地址/","content":"<h3 id=\"1-物理和虚拟寻址\">1.物理和虚拟寻址</h3>\n<p>  现代处理器使用的是一种称为虚拟寻址的寻址方式。<span id=\"more\"></span><br>\n<img src=\"/img/%E5%AF%BB%E5%9D%80.png\" alt=\"\"></p>\n<h3 id=\"2．页表\">2．页表</h3>\n<p>  虚拟内存系统必须有某种方法来判断一个虚拟页是否缓存在DRAM中的某个地方，并且如何找到它。这些功能是由软硬件联合提供的，包括OS软件，MMU（内存管理单元）中的地址翻译硬件和一个存放在物理内存中叫做页表的数据结构，页表将虚拟页映射到物理页。<br>\n<img src=\"/img/%E9%A1%B5%E8%A1%A8.png\" alt=\"\"><br>\n有效位和地址：<br>\n有效位为1，地址字段表示了DRAM中相应的物理页的起始位置（已分配已缓存）<br>\n有效位为0，地址字段非空，地址字段则表示该虚拟页在磁盘中的位置（已分配未缓存）<br>\n有效位为0，地址字段空，未分配未缓存</p>\n<h3 id=\"3-页命中\">3.页命中</h3>\n<p>  考虑一下当CPU想要读包含在VP 2中的虚拟内存的-一个字时会发生什么(图9-5)，VP2被缓存在DRAM中。使用我们将在9.6节中详细描述的一种技术，地址翻译硬件将虚拟地址作为一个索引来定位PTE2，并从内存中读取它。因为设置了有效位，那么地址翻译硬件就知道VP2是缓存在内存中的了。所以它使用PTE中的物理内存地址(该地址指向PP1中缓存页的起始位置)，构造出这个字的物理地址。<br>\n<img src=\"/img/%E9%A1%B5%E5%91%BD%E4%B8%AD.png\" alt=\"\"></p>\n<h3 id=\"4-缺页\">4.缺页</h3>\n<p>  在虚拟内存的习惯说法中，DRAM缓存不命中称为缺页(page fault)。图9-6展示了在缺页之前我们的示例页表的状态。CPU引用了VP3中的一个字，VP3并未缓存在DRAM中。地址翻译硬件从内存中读取PTE3，从有效位推断出VP3未被缓存，并且触发一个缺页异常。缺页异常调用内核中的缺页异常处理程序，该程序会选择-一个牺牲页，在此例中就是存放在PP 3中的VP4。如果VP 4已经被修改了，那么内核就会将它复制回磁盘。无论哪种情况，内核都会修改VP4的页表条目，反映出VP4不再缓存在主存中这一事实。<br>\n<img src=\"/img/%E7%BC%BA%E9%A1%B51.png\" alt=\"\"><br>\n  接下来，内核从磁盘复制VP3到内存中的PP3，更新PTE3，随后返回。当异常处理程序返回时，它会重新启动导致缺页的指令，该指令会把导致缺页的虚拟地址重发送到地址翻译硬件。但是现在，VP3已经缓存在主存中了，那么页命中也能由地址翻译硬件正常处理了。图9-7展示了在缺页之后我们的示例页表的状态。<br>\n<img src=\"/img/%E7%BC%BA%E9%A1%B52.png\" alt=\"\"></p>\n<h3 id=\"5-全过程\">5.全过程</h3>\n<p>  程序运行时内核为程序建立页表，页表由内核维护。页表存在两个映射，一个映射到磁盘的目标执行文件（虚拟地址与磁盘的映射），另一个映射到真实物理内存（虚拟地址与物理内存地址映射）。内核调度CPU到页表第一页执行程序，从main函数开始。CPU发现第一页并没有加载到物理内存，发生缺页异常，CPU把磁盘上对应的目标程序的页加载到物理内存，并改变页表状态（映射）。CPU重新读取页内容执行，此时不再有缺页异常。<br>\n  程序从main函数开始，函数是一个栈，执行前先分配栈内存，这部分代码由编译器生成，CPU执行前,这部分栈内存地址是虚拟地址，需要映射到真实的物理地址，然后开始执行函数内容，假设函数第一条语句是int a=1;则a的地址（虚拟地址）内存存入1，通过mmu把1放入真实的对应的物理地址内存。再假设第二句语句是一个函数fun()调用，过程类似main函数，fun函数执行完毕释放内存，销毁映射。<br>\n<img src=\"/img/%E5%85%A8%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"虚拟地址","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"csapp","slug":"csapp","permalink":"http://example.com/tags/csapp/"}]},{"title":"链接(一)","date":"2022-11-13T16:04:39.000Z","path":"链接(一)/","content":"<p>可执行文件的生成步骤<span id=\"more\"></span><br>\n<img src=\"/img/hello.png\" alt=\"\"><br>\n可执行文件的生成过程如下图：<br>\n<img src=\"/img/%E6%AD%A5%E9%AA%A4.png\" alt=\"\"><br>\n如图，可执行文件的生成需要经过预处理、编译、汇编和链接这4个过程。其中：<br>\n预处理的工作：<br>\n删除 #define 并展开宏定义<br>\n处理所有的条件预编译指令，如 “#if”，“#ifdef”，&quot;#endif&quot;等<br>\n插入头文件到 “#include” 处，可以递归方式进行处理<br>\n删除所有的注释<br>\n添加行号和文件名标识，以便编译时编译器产生调试用的行号信息<br>\n保留所有 #pragma 编译指令（编译器需要用）<br>\n命令示例如下：<br>\ngcc -E hello.c -o hello.i<br>\n经过预编译处理后，得到的是预处理文件（如，hello.i），它还是一个可读的文本文件，但不包含任何宏定义。</p>\n<p>编译的工作<br>\n编译过程就是将预处理后得到的预处理文件（如hello.i）进行词法分析、语法分析、语义分析、优化后，生成汇编代码文件。<br>\n经过编译后，得到的汇编代码文件（如，hello.S）还是一个可读的文本文件。<br>\n命令示例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S hello.i -o hello.s</span><br><span class=\"line\">gcc -S hello.c -o hello.s</span><br></pre></td></tr></table></figure>\n<p>汇编的工作<br>\n汇编器将编译得到的汇编代码文件转换成机器指令序列。<br>\n汇编的结果是一个可重定位目标文件（如，hello.o）其中包含的是不可读的二进制代码。<br>\n命令示例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c hello.s -o hello.o</span><br><span class=\"line\">gcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"链接(一)","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"csapp","slug":"csapp","permalink":"http://example.com/tags/csapp/"}]},{"title":"内存共享、写时复制","date":"2022-11-13T15:42:12.000Z","path":"csapp重点摘抄/","content":"<h3 id=\"1-共享对象\">1.共享对象</h3>\n<p>   内存映射的概念来源于-一个聪明的发现:如果虚拟内存系统可以集成到传统的文件系统中，那么就能提供一种简单而高效的把程序和数据加载到内存中的方法。<span id=\"more\"></span><br>\n  正如我们已经看到的，进程这一抽象能够为每个进程提供自己私有的虚拟地址空间，可以免受其他进程的错误读写。不过，许多进程有同样的只读代码区域。例如，每个运行Linux shell程序bash的进程都有相同的代码区域。而且，许多程序需要访问只读运行时库代码的相同副本。例如，每个C程序都需要来自标准C库的诸如printf这样的函数。那么，如果每个进程都在物理内存中保持这些常用代码的副本，那就是极端的浪费了。幸运的是，内存映射给我们提供了一种清晰的机制，用来控制多个进程如何共享对象。<br>\n  一个对象可以被映射到虛拟内存的一个区域，要么作为共享对象，要么作为私有对象。如果一个进程将–个共享对象映射到它的虚拟地址空间的一一个区域内，那么这个进程对这个区域的任何写操作，对于那些也把这个共享对象映射到它们虛拟内存的其他进程而言，也是可见的。而且，这些变化也会反映在磁盘上的原始对象中。<br>\n  另一方面，对于一个映射到私有对象的区域做的改变，对于其他进程来说是不可见的，并且进程对这个区域所做的任何写操作都不会反映在磁盘上的对象中。一个映射到共享对象的虚拟内存区域叫做共享区域。类似地，也有私有区域。<br>\n  假设进程1将一个共享对象映射到它的虚拟内存的一个区域中，如图9-29a所示。现在假设进程2将同一个共享对象映射到它的地址空间(并不-定要和进程1在相同的虛拟地址处，如图9-29b所示)。<br>\n<img src=\"/img/9-29b.png\" alt=\"csapp\"><br>\n  因为每个对象都有一个唯- -的文件名，内核可以迅速地判定进程1已经映射了这个对象，而且可以使进程2中的页表条目指向相应的物理页面。关键点在于即使对象被映射到了多个共享区域，物理内存中也只需要存放共享对象的一个副本。为了方便，我们将物理页面显示为连续的，但是在一般情况下当然不是这样的。</p>\n<h3 id=\"2-写时复制\">2.写时复制</h3>\n<p>  私有对象使用一种叫做写时复制(copyon-write)的巧妙技术被映射到虚拟内存中。一个私有对象开始生命周期的方式基本上与共享对象的一-样，在物理内存中只保存有私有对象的-份副本。比如，图9-30a展示了一种情况，其中两个进程将-一个私有对象映射到它们虚拟内存的不同区域，但是共享这个对象同-一个物理副本。对于每个映射私有对象的进程，相应私有区域的页表条目都被标记为只读，并且区域结构被标记为私有的写时复制。只要没有进程试图写它自己的私有区域，它们就可以继续共享物理内存中对象的-一个单独副本。然而，只要有一个进程试图写私有区域内的某个页面，那么这个写操作就会触发一个保护故障。<br>\n  当故障处理程序注意到保护异常是由于进程试图写私有的写时复制区域中的一个页面而引起的，它就会在物理内存中创建这个页面的一个新副本，更新页表条目指向这个新的副本，然后恢复这个页面的可写权限，如图9-30b所示。当故障处理程序返回时，CPU重新执行这个写操作，现在在新创建的页面上这个写操作就可以正常执行了。<br>\n<img src=\"/img/9-30a.jpg\" alt=\"csapp\"><br>\n  通过延迟私有对象中的副本直到最后可能的时刻，写时复制最充分地使用了稀有的物理内存。</p>\n<h3 id=\"3-fork函数\">3.fork函数</h3>\n<p>  既然我们理解了虚拟内存和内存映射，那么我们可以清晰地知道fork 函数是如何创建一个带有自己独立虚拟地址空间的新进程的。<br>\n  当fork函数被当前进程调用时，内核为新进程创建各种数据结构，并分配给它一个唯一的PID。为了给这个新进程创建虚拟内存，它创建了当前进程的mm_struct:t、 区域结构和页表的原样副本。它将两个进程中的每个页面都标记为只读，并将两个进程中的每个区域结构都标记为私有的写时复制。<br>\n  当fork在新进程中返回时，新进程现在的虚拟内存刚好和调用fork时存在的虚拟内存相同。当这两个进程中的任一个后来进行写操作时，写时复制机制就会创建新页面，因此，也就为每个进程保持了私有地址空间的抽象概念。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"csapp重点摘抄","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"csapp","slug":"csapp","permalink":"http://example.com/tags/csapp/"}]},{"title":"操作系统知识点","date":"2022-11-12T23:21:22.000Z","path":"散乱知识/","content":"<h3 id=\"1-代码段（text）、数据段、堆栈\">1. 代码段（text）、数据段、堆栈</h3>\n<p>1.1 过程<br>\n  程序运行过程是先分配内存，然后从硬盘载入程序（只是载入部分，局部性原理）到内存中，这部分存储程序的内存称为代码段。cpu从代码段段中获取指令进行相关操作，<span id=\"more\"></span>指令执行过程需要使用到的内存称为堆、栈。堆由程序进行申请与释放，生命周期由程序管理；栈由编译器进行申请与释放，生命周期由编译器管理。数据段一般指全局变量与静态变量，数据段的数据数据生命周期直到程序结束。bss段记录全局变量，静态变量的信息，如变量名称、大小，在程序执行期间才进行初始化分配内存与赋值。<br>\n1.2 关于字面量与常量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">5</span>;<span class=\"comment\">//5时字面量，位于代码段</span></span><br><span class=\"line\"><span class=\"type\">char</span> *p = <span class=\"string\">&quot;哈哈哈&quot;</span><span class=\"comment\">//字符串字面量，位于只读数据段</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> P = <span class=\"number\">5</span>;<span class=\"comment\">//p是常量，5是字面量，编译器编译前进行替换处理</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = p;<span class=\"comment\">//编译把p前替换为5</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/%E6%AE%B5.png\" alt=\"虚拟地址图\"></p>\n<h3 id=\"2-虚拟地址、mmu\">2.虚拟地址、mmu</h3>\n<p>  程序与操作系统共享虚拟地址，64位系统的虚拟地址为0-2<sup>64</sup>，操作系统一般占据高地址，程序占据低地址。程序内涉及的地址值是起始地址+偏移地址，起始地址随机值，即程序内的内存地址也是随机值，原因是为了程序安全。<br>\n如图：<br>\n<img src=\"/img/%E8%99%9A%E6%8B%9F.png\" alt=\"虚拟地址图\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"散乱知识","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"生产者与消费者模型","date":"2022-11-12T17:36:46.000Z","path":"生产者与消费者模型/","content":"<p><strong>windows环境下用C语言实现生产者与消费者模型（信号量)</strong><br>\n   信号量的工作机制可以简单直接理解成计数器，信号量会有初值（&gt;=0），每当有进程申请使用信号量时，通过一个P操作来对信号量进行-1操作，<span id=\"more\"></span>当计数器减到0的时候就说明没有资源了，其他进程要想访问就必须等待，当该进程执行完这段工作（我们称之为临界区）之后，就会执行V操作来对信号量进行+1。</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sched.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;conio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;pthreadVC2.lib&quot;</span>)  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 5  <span class=\"comment\">//消费者或者生产者的数目</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> M 10  <span class=\"comment\">//缓冲数目</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> productin = <span class=\"number\">0</span>; <span class=\"comment\">//生产者放置产品的位置</span></span><br><span class=\"line\"><span class=\"type\">int</span> prochaseout = <span class=\"number\">0</span>; <span class=\"comment\">//消费者取产品的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> buff[M] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//缓冲区初始化为0，开始时没有产品。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">sem_t</span> empty_sem; <span class=\"comment\">// 同步信号量，当满的时候阻止生产者放产品。</span></span><br><span class=\"line\"><span class=\"type\">sem_t</span> full_sem; <span class=\"comment\">//同步信号量，当没有产品的时候阻止消费者消费。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">pthread_mutex_t</span> mutex; <span class=\"comment\">//互斥信号量，一次只有一个线程访问缓冲区。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> product_id = <span class=\"number\">0</span>; <span class=\"comment\">//生产者id</span></span><br><span class=\"line\"><span class=\"type\">int</span> prochase_id = <span class=\"number\">0</span>; <span class=\"comment\">//消费者id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SignalExit</span><span class=\"params\">(<span class=\"type\">int</span> signo)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;程序退出%d\\n&quot;</span>,signo);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintProduction</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;此时的产品队列为::&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d  &quot;</span>,buff[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////生产者方法////////////////////</span></span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">Product</span><span class=\"params\">(<span class=\"type\">void</span>* pramter)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id = ++product_id;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Sleep(<span class=\"number\">5000</span>); <span class=\"comment\">//毫秒</span></span><br><span class=\"line\">        sem_wait(&amp;empty_sem); <span class=\"comment\">//给信号量减1操作</span></span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        productin = productin % M;<span class=\"comment\">//自动归0</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;生产者%d在产品队列中放入第%d个产品\\n\\n&quot;</span>,id,productin+<span class=\"number\">1</span>);<span class=\"comment\">//序列1一开始，所以需+1</span></span><br><span class=\"line\">        buff[productin] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        PrintProduction();</span><br><span class=\"line\">        ++productin;</span><br><span class=\"line\"></span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex); <span class=\"comment\">//释放互斥量对象</span></span><br><span class=\"line\">        sem_post(&amp;full_sem); <span class=\"comment\">//给信号量的值加1操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////消费者方法///////////////////////</span></span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">Prochase</span><span class=\"params\">( <span class=\"type\">void</span>* pramter )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id = ++prochase_id;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Sleep(<span class=\"number\">7000</span>);</span><br><span class=\"line\">        sem_wait(&amp;full_sem);</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        prochaseout = prochaseout % M;<span class=\"comment\">//自动归0</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;消费者%d从产品队列中取出第%d个产品\\n\\n&quot;</span>,id,prochaseout+<span class=\"number\">1</span>);<span class=\"comment\">//序列1一开始，所以需+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        buff[prochaseout] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        PrintProduction();</span><br><span class=\"line\">        ++prochaseout;</span><br><span class=\"line\"></span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        sem_post(&amp;empty_sem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> ( <span class=\"string\">&quot;生产者和消费者数目都为5,产品缓冲区为10,生产者每2秒生产一个产品，消费者每5秒消费一个产品\\n&quot;</span> );</span><br><span class=\"line\">    <span class=\"type\">pthread_t</span> productid[N];</span><br><span class=\"line\">    <span class=\"type\">pthread_t</span> prochaseid[N];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret[N];</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">/*初始化信号量</span></span><br><span class=\"line\"><span class=\"comment\">    extern int sem_init __P ((sem_t *__sem, int __pshared, unsigned int __value));　　</span></span><br><span class=\"line\"><span class=\"comment\">    sem为指向信号量结构的一个指针；</span></span><br><span class=\"line\"><span class=\"comment\">    pshared不为０时此信号量在进程间共享，否则只能为当前进程的所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\">    value给出了信号量的初始值。*/</span></span><br><span class=\"line\">    <span class=\"type\">int</span> seminit1 = sem_init(&amp;empty_sem,<span class=\"number\">0</span>,M);</span><br><span class=\"line\">    <span class=\"type\">int</span> seminit2 = sem_init(&amp;full_sem,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( seminit1 != <span class=\"number\">0</span>  &amp;&amp; seminit2 != <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem_init failed !!!\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化互斥信号量,+1操作非原子操作，上锁用于同步，避免出错</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mutexinit = pthread_mutex_init(&amp;mutex,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( mutexinit != <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pthread_mutex_init failed !!\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建n个生产者线程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret[i] = pthread_create( &amp;productid[i], <span class=\"literal\">NULL</span>,Product,(<span class=\"type\">void</span>*)(&amp;i) );</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( ret[i] != <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;生产者%d线程创建失败!\\n&quot;</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建n个消费者线程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret[j] = pthread_create(&amp;prochaseid[j],<span class=\"literal\">NULL</span>,Prochase,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( ret[j] != <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;消费者%d线程创建失败\\n&quot;</span>,j);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///////////////////////等待线程被销毁///////////////////////////////////////////////</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; N; k++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;销毁线程\\n&quot;</span>);</span><br><span class=\"line\">        pthread_join(productid[k],<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        pthread_join(prochaseid[k],<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n    </div>\n</div><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"生产者与消费者模型","categories":[{"name":"多线程","slug":"多线程","permalink":"http://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"C语言多进程","date":"2022-11-12T15:50:54.000Z","path":"C语言多进程/","content":"<p><strong>c语言多进程写法</strong><br>\n在linux下：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">/*这段代码在linux中运行，fork函数有两次返回，</span></span><br><span class=\"line\"><span class=\"comment\">   即调用一次，返回两次。在父进程返回子进程的pid，在子进程返回0，</span></span><br><span class=\"line\"><span class=\"comment\">   如果返回负数则表明fork失败。</span></span><br><span class=\"line\"><span class=\"comment\">   所以，我们根据返回值来判断当前进程是父进程还是子进程。*/</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;父进程 id: %d\\n&quot;</span>, getpid());</span><br><span class=\"line\">   <span class=\"type\">int</span> f_id;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      f_id = fork();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (f_id == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;子进程 id: %d\\n&quot;</span>, getpid());</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;子进程里的f_id : %d\\n&quot;</span>, f_id);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;进父程里的f_id : %d\\n&quot;</span>, f_id);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"C语言多进程","categories":[{"name":"多进程","slug":"多进程","permalink":"http://example.com/categories/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"状态机示例（二）","date":"2022-11-03T15:10:36.000Z","path":"状态机器示例（二）/","content":"<p><strong>用状态机实现洗衣机工作流程：</strong><br>\n洗衣机工作流程如图所示：</p>\n<span id=\"more\"></span>\n<p><img src=\"/img/%E6%B4%97%E8%A1%A3%E6%9C%BA%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"洗衣机流程图\"></p>\n<p>大致代码如下所示（伪代码）：</p>\n <div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n         <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">global_check</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">auto_check</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(自检通过) *index = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> \t\t*index = <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">alarm</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">wait_for_user</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">start_countdown</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">let_water_in</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">do_wash</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">let_water_out</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">do_dry</span><span class=\"params\">(<span class=\"type\">int</span> *index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">finished</span><span class=\"params\">(<span class=\"type\">int</span> *indexd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">void</span> (* event [<span class=\"number\">8</span>]) (<span class=\"type\">void</span>),<span class=\"type\">int</span> *index)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tevent[*index]();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用指针实现状态转换：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">uint8_t</span> step = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">void</span> (* event [<span class=\"number\">8</span>]) (<span class=\"type\">int</span> *) = &#123;auto_check,..... &#125;;<span class=\"comment\">//这是一个数组，数组内容是函数指针</span></span><br><span class=\"line\">    init();</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"number\">0</span>;<span class=\"comment\">//转变状态</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchange(event,&amp;index);</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.........</span><br><span class=\"line\">\t.........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>用switch进行状态转换：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//开机进行一些必要的初始化</span></span><br><span class=\"line\">\tinit();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//一些全局的事件检测可以放在这里，用于设置一些全局标志</span></span><br><span class=\"line\">\t\tglobal_check();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//状态机</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(step)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123; <span class=\"comment\">//自检</span></span><br><span class=\"line\">\t\t\t\tauto_check();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(自检通过) step = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> \t\tstep = <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123; <span class=\"comment\">//空闲</span></span><br><span class=\"line\">\t\t\t\twait_for_user();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(按下开始) step = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123; <span class=\"comment\">//倒计时</span></span><br><span class=\"line\">\t\t\t\tstart_countdown();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(倒计时结束) step = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: &#123; <span class=\"comment\">//加水</span></span><br><span class=\"line\">\t\t\t\tlet_water_in();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(水加满了) step = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>: &#123;</span><br><span class=\"line\">\t\t\t\tdo_wash();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(清洗时间结束) step = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>: &#123; <span class=\"comment\">//放水</span></span><br><span class=\"line\">\t\t\t\tlet_water_out();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(水放完 &amp;&amp; 只洗了一遍) \t\tstep =  <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(水放完 &amp;&amp; 洗了两遍) \tstep = <span class=\"number\">7</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>: &#123; <span class=\"comment\">//甩干</span></span><br><span class=\"line\">\t\t\t\tdo_dry();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(甩干时间结束) step = <span class=\"number\">8</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>: &#123; <span class=\"comment\">//洗衣结束</span></span><br><span class=\"line\">\t\t\t\tfinished();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tstep = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//死循环，不再响应用户操作，并报警</span></span><br><span class=\"line\">\t\t\t\t\talarm();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n    </div>\n</div><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"状态机器示例（二）","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"状态机","slug":"状态机","permalink":"http://example.com/tags/%E7%8A%B6%E6%80%81%E6%9C%BA/"},{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"状态机示例（一）","date":"2022-11-03T14:36:12.000Z","path":"状态机示例（一）/","content":"<p><strong>如图所示，图中的状态转换即是状态机</strong></p>\n<span id=\"more\"></span>\n<p><img src=\"/img/%E6%85%B5%E6%87%92.jpg\" alt=\"慵懒\"></p>\n<p>上图所示用python代码描述如下：</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random,time</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QWidget, QPushButton</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">状态 = <span class=\"string\">&quot;发呆&quot;</span></span><br><span class=\"line\"><span class=\"comment\">###某状态下发生事件</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">发呆</span>():</span><br><span class=\"line\">    事件 = [困了,饿了,想打游戏,憋得慌 ]</span><br><span class=\"line\">    随机事件 = random.randint(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(事件)-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;事件：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(事件[随机事件]()),<span class=\"string\">&quot;状态改变：--&gt;&#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(状态))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">在卧室</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;事件：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(醒了()),<span class=\"string\">&quot;状态改变：--&gt;发呆&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">在客厅</span>():</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;事件：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(打累了()),<span class=\"string\">&quot;状态改变：--&gt;发呆&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">在厕所</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;事件：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(处理完毕()),<span class=\"string\">&quot;状态改变：--&gt;发呆&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">在饭厅</span>():</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;事件：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(吃完()),<span class=\"string\">&quot;状态改变：--&gt;发呆&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">在厨房</span>():</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;事件：&#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(做好了饭()),<span class=\"string\">&quot;状态改变：--&gt;饭厅&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#发生事件，改变状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">困了</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;在卧室&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;困了&quot;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">醒了</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;发呆&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;醒了;&quot;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">想打游戏</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;在客厅&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;想打游戏&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">打累了</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;发呆&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;打累了&quot;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">饿了</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;在厨房&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;饿了&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">做好了饭</span>():</span><br><span class=\"line\">     <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">     状态 = <span class=\"string\">&quot;在饭厅&quot;</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;做好了饭&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">吃完</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;发呆&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;吃完了&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">憋得慌</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;在厕所&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"string\">&quot;憋得慌&quot;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">处理完毕</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> 状态</span><br><span class=\"line\">    状态 = <span class=\"string\">&quot;发呆&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;处理完毕&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    状态_ = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;发呆&quot;</span>:发呆,<span class=\"string\">&quot;在厕所&quot;</span>:在厕所,<span class=\"string\">&quot;在客厅&quot;</span>:在客厅,<span class=\"string\">&quot;在饭厅&quot;</span>:在饭厅,<span class=\"string\">&quot;在卧室&quot;</span>:在卧室,</span><br><span class=\"line\">        <span class=\"string\">&quot;在厕所&quot;</span>:在厕所,<span class=\"string\">&quot;在厨房&quot;</span>:在厨房</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;当前状态:&#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(状态))</span><br><span class=\"line\">        状态_[状态]()<span class=\"comment\">#发生状态事件</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>用状态机实现按钮点击事件，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">状态机</span>(<span class=\"title class_ inherited__\">QWidget</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.btn1 = QPushButton(self)</span><br><span class=\"line\">        self. btn1.setText(<span class=\"string\">&quot;初始状态&quot;</span>)</span><br><span class=\"line\">        self.btn1.clicked.connect(self.change)</span><br><span class=\"line\">        self.状态列表 = [self.状态<span class=\"number\">1</span>,self.状态<span class=\"number\">2</span>,self.状态<span class=\"number\">3</span>,self.状态<span class=\"number\">4</span>,</span><br><span class=\"line\">        self.状态<span class=\"number\">5</span>,self.状态<span class=\"number\">6</span>,self.初始状态]</span><br><span class=\"line\">        self.i = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.状态列表[self.i]()<span class=\"comment\">#执行状态事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.i == (<span class=\"built_in\">len</span>(self.状态列表)-<span class=\"number\">1</span>):</span><br><span class=\"line\">           self.i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:self.i = self.i +<span class=\"number\">1</span><span class=\"comment\">#改变状态</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">初始状态</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      self.btn1.setText(<span class=\"string\">&quot;初始状态&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">状态1</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      self.btn1.setText(<span class=\"string\">&quot;状态1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">状态2</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      self.btn1.setText(<span class=\"string\">&quot;状态2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">状态3</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">       self.btn1.setText(<span class=\"string\">&quot;状态3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">状态4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">       self.btn1.setText(<span class=\"string\">&quot;状态4&quot;</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">状态5</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">       self.btn1.setText(<span class=\"string\">&quot;状态5&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">状态6</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      self.btn1.setText(<span class=\"string\">&quot;状态6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    win = 状态机()</span><br><span class=\"line\">    win.show()</span><br><span class=\"line\">    app.exec_()</span><br></pre></td></tr></table></figure>\n    </div>\n</div><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"状态机示例（一）","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"状态机","slug":"状态机","permalink":"http://example.com/tags/%E7%8A%B6%E6%80%81%E6%9C%BA/"},{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"简易黑窗聊天室","date":"2022-11-03T13:45:44.000Z","path":"简易黑窗聊天室/","content":"<p><strong>只能在linux下编译，在windows自行更改改代码</strong><br>\n<em>服务端</em></p>\n<span id=\"more\"></span>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GUN_SOURCE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/epoll.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXEVENTS 100</span></span><br><span class=\"line\"><span class=\"type\">int</span> clientSocket[MAXEVENTS];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并初始化连接套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InitSocket</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> sockfd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sockfd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">ser</span>;</span></span><br><span class=\"line\">   <span class=\"built_in\">memset</span>(&amp;ser, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ser));</span><br><span class=\"line\">   ser.sin_family = AF_INET;</span><br><span class=\"line\">   ser.sin_port = htons(<span class=\"number\">6000</span>);</span><br><span class=\"line\">   ser.sin_addr.s_addr = inet_addr(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">int</span> res = bind(sockfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;ser, <span class=\"keyword\">sizeof</span>(ser));</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (res == <span class=\"number\">-1</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   res = listen(sockfd, <span class=\"number\">5</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (res == <span class=\"number\">-1</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> sockfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取新的客户端链接，并添加到epfd中</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetNewClient</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">int</span> epfd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">cli</span>;</span></span><br><span class=\"line\">   <span class=\"type\">socklen_t</span> len = <span class=\"keyword\">sizeof</span>(cli);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">int</span> c = accept(fd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;cli, &amp;len);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (c &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;accpet error\\n&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MAXEVENTS; ++i)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == clientSocket[i])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         clientSocket[i] = c;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;one client link success\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 将新的客户端文件描述符添加到内核事件表中</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> <span class=\"title\">events</span>;</span></span><br><span class=\"line\">   events.data.fd = c;</span><br><span class=\"line\">   events.events = EPOLLIN | EPOLLRDHUP; <span class=\"comment\">//可读，且每次触发，默认lT模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">int</span> res = epoll_ctl(epfd, EPOLL_CTL_ADD, c, &amp;events);</span><br><span class=\"line\">   assert(res != <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理客户端的数据</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DealClientData</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">int</span> sockfd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">   <span class=\"type\">int</span> n = recv(fd, buff, <span class=\"number\">127</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 将接收的字符设置为一个以便观察LT的结果</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d recv error\\n&quot;</span>, fd);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"type\">char</span> tBuff[<span class=\"number\">2048</span>];</span><br><span class=\"line\">   <span class=\"built_in\">sprintf</span>(tBuff, <span class=\"string\">&quot;%d客户端消息:%s&quot;</span>, fd, buff);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MAXEVENTS; ++i)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((clientSocket[i] != <span class=\"number\">-1</span> &amp;&amp; clientSocket[i] != fd) &amp;&amp; clientSocket[i] != sockfd)</span><br><span class=\"line\">         send(clientSocket[i], tBuff, <span class=\"built_in\">strlen</span>(tBuff) - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: %s\\n&quot;</span>, fd, buff);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理就绪事件</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DealFinshEvents</span><span class=\"params\">(<span class=\"keyword\">struct</span> epoll_event *events, <span class=\"type\">int</span> n, <span class=\"type\">int</span> epfd, <span class=\"type\">int</span> sockfd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> fd = events[i].data.fd;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fd == sockfd)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 获取新的客户端链接，并添加到epfd中</span></span><br><span class=\"line\">         GetNewClient(fd, epfd);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (events[i].events &amp; EPOLLRDHUP) <span class=\"comment\">// 客户端关闭了连接或者写操作</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            close(fd);</span><br><span class=\"line\">            <span class=\"comment\">// 删除内核事件表中的事件描述符</span></span><br><span class=\"line\">            epoll_ctl(epfd, EPOLL_CTL_DEL, fd, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MAXEVENTS; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (clientSocket[i] != <span class=\"number\">-1</span> &amp;&amp; clientSocket[i] == fd)</span><br><span class=\"line\">                  clientSocket[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理客户端的数据</span></span><br><span class=\"line\">            DealClientData(fd, sockfd);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MAXEVENTS; ++i)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      clientSocket[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 创建并初始化连接套接字</span></span><br><span class=\"line\">   <span class=\"type\">int</span> sockfd = InitSocket();</span><br><span class=\"line\">   clientSocket[<span class=\"number\">0</span>] = sockfd;</span><br><span class=\"line\">   assert(sockfd != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 创建内核事件表</span></span><br><span class=\"line\">   <span class=\"type\">int</span> epfd = epoll_create(<span class=\"number\">10</span>);</span><br><span class=\"line\">   assert(epfd != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> <span class=\"title\">event</span>;</span></span><br><span class=\"line\">   event.events = EPOLLIN;</span><br><span class=\"line\">   event.data.fd = sockfd;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 将sockfd添加到内核事件表</span></span><br><span class=\"line\">   <span class=\"type\">int</span> res = epoll_ctl(epfd, EPOLL_CTL_ADD, sockfd, &amp;event);</span><br><span class=\"line\">   assert(res != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">int</span> count = <span class=\"number\">0</span>; <span class=\"comment\">// 用于记录epoll_wait的返回次数</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span> <span class=\"title\">events</span>[<span class=\"title\">MAXEVENTS</span>];</span></span><br><span class=\"line\">      <span class=\"type\">int</span> n = epoll_wait(epfd, events, MAXEVENTS, <span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;epoll_wait error\\n&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;epoll_wait return %d\\n&quot;</span>, count++);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 处理就绪事件</span></span><br><span class=\"line\">      DealFinshEvents(events, n, epfd, sockfd);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n<p><em>客户端</em></p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> clientSocket;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hand</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 5. 关闭连接</span></span><br><span class=\"line\">   close(clientSocket);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;bye bye!\\n&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入ip地址和端口号!\\n&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ip: %s     port:%d\\n&quot;</span>, argv[<span class=\"number\">1</span>], atoi(argv[<span class=\"number\">2</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">   signal(SIGINT, hand); <span class=\"comment\">//收到键盘信息（ctrl+c）后调用hand（）函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 1. 创建socket 参数一: 协议类型(版本) 参数二: 通信媒介 参数三: 保护方式</span></span><br><span class=\"line\">   clientSocket = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == clientSocket)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;创建socket失败:%m\\n&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;创建socket成功!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 2. 创建服务器协议地址簇</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">cAddr</span> =</span> &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">   cAddr.sin_family = AF_INET;</span><br><span class=\"line\">   cAddr.sin_addr.s_addr = inet_addr(argv[<span class=\"number\">1</span>]); <span class=\"comment\">//将字符串转整数</span></span><br><span class=\"line\">   cAddr.sin_port = htons(atoi(argv[<span class=\"number\">2</span>]));      <span class=\"comment\">//将字符串转整数,再将小端转换成大端</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 3.连接服务器</span></span><br><span class=\"line\">   <span class=\"type\">int</span> r = connect(clientSocket, (<span class=\"keyword\">struct</span> sockaddr *)&amp;cAddr, <span class=\"keyword\">sizeof</span> cAddr);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == r)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;连接服务器失败:%m\\n&quot;</span>), close(clientSocket), <span class=\"built_in\">exit</span>(<span class=\"number\">-2</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;连接服务器成功!\\n&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入：\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//开始监视</span></span><br><span class=\"line\">   <span class=\"comment\">//不仅要监视标准输入设备, 还要监视clientSocket服务器是否发送数据</span></span><br><span class=\"line\">   fd_set fds;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"type\">int</span> maxFd = clientSocket &gt; <span class=\"number\">0</span> ? clientSocket : <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">char</span> buff[<span class=\"number\">2048</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">//清空集合</span></span><br><span class=\"line\">      FD_ZERO(&amp;fds);</span><br><span class=\"line\">      <span class=\"comment\">//将标准输入输出放入到集合中</span></span><br><span class=\"line\">      FD_SET(<span class=\"number\">0</span>, &amp;fds);</span><br><span class=\"line\">      <span class=\"comment\">//将clientSocket放入到监视集合中</span></span><br><span class=\"line\">      FD_SET(clientSocket, &amp;fds);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//开始监视</span></span><br><span class=\"line\">      r = select(maxFd + <span class=\"number\">1</span>, &amp;fds, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == r)</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;客户端崩溃:%m\\n&quot;</span>), close(clientSocket), <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == r)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;客户端处于等待状态!\\n&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"built_in\">memset</span>(buff, <span class=\"number\">0</span>, <span class=\"number\">2048</span>);</span><br><span class=\"line\">         <span class=\"comment\">//如果 0 有动静就向服务器发消息</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (FD_ISSET(<span class=\"number\">0</span>, &amp;fds))</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入：\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, buff);</span><br><span class=\"line\">            send(clientSocket, buff, <span class=\"built_in\">strlen</span>(buff), <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//如果 clientSocket有动静就接收服务器发来的消息</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (FD_ISSET(clientSocket, &amp;fds) &amp;&amp; <span class=\"number\">-1</span> != clientSocket)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(buff, <span class=\"number\">0</span>, <span class=\"number\">2048</span>);</span><br><span class=\"line\">            r = recv(clientSocket, buff, <span class=\"number\">2047</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               buff[r] = <span class=\"number\">0</span>;</span><br><span class=\"line\">               <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %s\\n&quot;</span>, buff);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n    </div>\n</div><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"简易黑窗聊天室","categories":[{"name":"demo","slug":"demo","permalink":"http://example.com/categories/demo/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"清华源使用帮助链接","date":"2022-11-03T13:38:26.000Z","path":"清华源使用帮助链接/","content":"<h1><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help\">清华源使用帮助连接</a></h1>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"清华源使用帮助链接","categories":[{"name":"杂","slug":"杂","permalink":"http://example.com/categories/%E6%9D%82/"}],"tags":[{"name":"清华源","slug":"清华源","permalink":"http://example.com/tags/%E6%B8%85%E5%8D%8E%E6%BA%90/"}]},{"title":"配置java环境","date":"2022-11-03T12:27:49.000Z","path":"配置java环境/","content":"<h3 id=\"java解压方式安装\">java解压方式安装</h3>\n<p><a href=\"https://www.oracle.com/java/technologies/downloads/#jdk18-windows#jdk%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80\">下载地址</a></p>\n<p>下载后解压,在jdk根目录打开cmd输入以下命令生成jre文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\bin\\jlink.exe --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure>\n<p>把 jdk根目录下的bin，jre\\bin目录加入环境变量。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"配置java环境","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"mysql安装","date":"2022-11-03T12:18:37.000Z","path":"mysql安装/","content":"<h3 id=\"windows下安装mysql\">windows下安装mysql</h3>\n<p><a href=\"https://dev.mysql.com/downloads/mysql/5.7.html#downloads\">下载网站</a>，选择zip下载,下载完成解压后把bin目录加入环境变量。</p>\n<p>在根目录新建一个的ini文件，文件内配置：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">default-character-set</span>=utf8<span class=\"comment\">#设置字符编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[mysqld]</span></span><br><span class=\"line\"><span class=\"attr\">character-set-server</span>=utf8</span><br><span class=\"line\"><span class=\"attr\">default-storage-engine</span>=INNODB<span class=\"comment\">#设置默认引擎默认</span></span><br></pre></td></tr></table></figure>\n<p>打开cmd输入以下命令初始化MySQLmy ，初始化成功后根目录会生成data文件夹，用作存储数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqld --initialize-insecure</span><br></pre></td></tr></table></figure>\n<p>在cmd中输入, 安装mysal。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld -install</span><br></pre></td></tr></table></figure>\n<p>输入，启动mysql服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n<p>输入 ，设置root用户密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql admin -u root password 1234</span><br></pre></td></tr></table></figure>\n<p>输入, 登录到mysql root用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p1234</span><br></pre></td></tr></table></figure>\n<p>输入, 关闭mysql服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net stop mysql </span><br></pre></td></tr></table></figure>\n<p>卸载mysql<br>\n先关闭mysql服务，然后输入，再删除环境变量与mysql安装目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld -remove mysql</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"mysql安装","categories":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"sql 50题练习","date":"2021-11-03T13:13:38.000Z","path":"sql 50题练习/","content":"<p><strong>表结构如下：</strong></p>\n<span id=\"more\"></span>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        点击显/隐内容\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Student(SId <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),Sname <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),Sage datetime,Ssex <span class=\"type\">varchar</span>(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;01&#x27;</span> , <span class=\"string\">&#x27;赵雷&#x27;</span> , <span class=\"string\">&#x27;1990-01-01&#x27;</span> , <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;02&#x27;</span> , <span class=\"string\">&#x27;钱电&#x27;</span> , <span class=\"string\">&#x27;1990-12-21&#x27;</span> , <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;03&#x27;</span> , <span class=\"string\">&#x27;孙风&#x27;</span> , <span class=\"string\">&#x27;1990-12-20&#x27;</span> , <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;04&#x27;</span> , <span class=\"string\">&#x27;李云&#x27;</span> , <span class=\"string\">&#x27;1990-12-06&#x27;</span> , <span class=\"string\">&#x27;男&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;05&#x27;</span> , <span class=\"string\">&#x27;周梅&#x27;</span> , <span class=\"string\">&#x27;1991-12-01&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;06&#x27;</span> , <span class=\"string\">&#x27;吴兰&#x27;</span> , <span class=\"string\">&#x27;1992-01-01&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;07&#x27;</span> , <span class=\"string\">&#x27;郑竹&#x27;</span> , <span class=\"string\">&#x27;1989-01-01&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;09&#x27;</span> , <span class=\"string\">&#x27;张三&#x27;</span> , <span class=\"string\">&#x27;2017-12-20&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;10&#x27;</span> , <span class=\"string\">&#x27;李四&#x27;</span> , <span class=\"string\">&#x27;2017-12-25&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;11&#x27;</span> , <span class=\"string\">&#x27;李四&#x27;</span> , <span class=\"string\">&#x27;2012-06-06&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;12&#x27;</span> , <span class=\"string\">&#x27;赵六&#x27;</span> , <span class=\"string\">&#x27;2013-06-13&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Student <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;13&#x27;</span> , <span class=\"string\">&#x27;孙七&#x27;</span> , <span class=\"string\">&#x27;2014-06-01&#x27;</span> , <span class=\"string\">&#x27;女&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Course(CId <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),Cname nvarchar(<span class=\"number\">10</span>),TId <span class=\"type\">varchar</span>(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Course <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;01&#x27;</span> , <span class=\"string\">&#x27;语文&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Course <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;02&#x27;</span> , <span class=\"string\">&#x27;数学&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Course <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;03&#x27;</span> , <span class=\"string\">&#x27;英语&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Teacher(TId <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),Tname <span class=\"type\">varchar</span>(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Teacher <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;01&#x27;</span> , <span class=\"string\">&#x27;张三&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Teacher <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;02&#x27;</span> , <span class=\"string\">&#x27;李四&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> Teacher <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;03&#x27;</span> , <span class=\"string\">&#x27;王五&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> week(CURDATE())<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> SC(SId <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),CId <span class=\"type\">varchar</span>(<span class=\"number\">10</span>),score <span class=\"type\">decimal</span>(<span class=\"number\">18</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;01&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span> , <span class=\"number\">80</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;01&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span> , <span class=\"number\">90</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;01&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span> , <span class=\"number\">99</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;02&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span> , <span class=\"number\">70</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;02&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span> , <span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;02&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span> , <span class=\"number\">80</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;03&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span> , <span class=\"number\">80</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;03&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span> , <span class=\"number\">80</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;03&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span> , <span class=\"number\">80</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;04&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span> , <span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;04&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span> , <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;04&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span> , <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;05&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span> , <span class=\"number\">76</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;05&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span> , <span class=\"number\">87</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;06&#x27;</span> , <span class=\"string\">&#x27;01&#x27;</span> , <span class=\"number\">31</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;06&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span> , <span class=\"number\">34</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;07&#x27;</span> , <span class=\"string\">&#x27;02&#x27;</span> , <span class=\"number\">89</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> SC <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;07&#x27;</span> , <span class=\"string\">&#x27;03&#x27;</span> , <span class=\"number\">98</span>);</span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n<p>1.sql语句的执行顺序为</p>\n<blockquote>\n<p>当一个查询语句同时出现了where,group by,having,order by的时候，执行顺序和编写顺序是：<br>\n1.执行where xx对全表数据做筛选，返回第1个结果集。<br>\n2.针对第1个结果集使用group by分组，返回第2个结果集。<br>\n3.针对第2个结果集中的数据执行select xx返回第3个结果集。<br>\n4.针对第3个结集执行having xx进行筛选，返回第4个结果集。<br>\n5.针对第4个结果集排序,获得最终结果。</p>\n</blockquote>\n<p>2.SUM(),MIN(),Max()这类的，我们称作是聚合函数。那么我们不能在where子句中使用这些函数，为什么呢？</p>\n<blockquote>\n<p>聚集函数也叫列函数，它们都是基于整列数据进行计算的，而where子句则是对数据行进行过滤的(这里过滤是在一个记录里边过滤的,基于&quot;行&quot;)，在筛选过程中依赖“基于已经筛选完毕的数据得出的计算结果”是一种悖论，这是行不通的。更简单地说，因为聚集函数要对全列数据时行计算，因而使用它的前提是：结果集已经确定！</p>\n</blockquote>\n<p>而where子句还处于“确定”结果集的过程中，因而不能使用聚集函数。</p>\n<p>1.查询&quot; 01 “课程比” 02 &quot;课程成绩高的学生的信息及课程分数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.<span class=\"operator\">*</span>,r.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> Student,  ( </span><br><span class=\"line\"><span class=\"keyword\">select</span> t1.sid,t1.score <span class=\"keyword\">as</span> c1 ,t2.score <span class=\"keyword\">as</span> c2 <span class=\"keyword\">from</span> </span><br><span class=\"line\">    (<span class=\"keyword\">select</span> SId, score  <span class=\"keyword\">from</span> sc <span class=\"keyword\">where</span> sc.CId <span class=\"operator\">=</span> <span class=\"string\">&#x27;01&#x27;</span>) <span class=\"keyword\">as</span> t1, </span><br><span class=\"line\">    (<span class=\"keyword\">select</span> SId ,score  <span class=\"keyword\">from</span> sc <span class=\"keyword\">where</span> sc.CId <span class=\"operator\">=</span> <span class=\"string\">&#x27;02&#x27;</span>) <span class=\"keyword\">as</span> t2</span><br><span class=\"line\">  <span class=\"keyword\">where</span> t1.score <span class=\"operator\">&gt;</span> t2.score  <span class=\"keyword\">and</span> t1.sid <span class=\"operator\">=</span> t2.sid) <span class=\"keyword\">as</span> r <span class=\"keyword\">where</span>  Student.SId <span class=\"operator\">=</span> r.SId ;</span><br></pre></td></tr></table></figure>\n<p>2.查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.sid, sname ,r.avger <span class=\"keyword\">from</span> student <span class=\"keyword\">join</span> ( </span><br><span class=\"line\">  <span class=\"keyword\">select</span> sid ,<span class=\"built_in\">avg</span>(score) <span class=\"keyword\">as</span> avger  <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.Sid  <span class=\"keyword\">having</span> <span class=\"built_in\">avg</span>(score)<span class=\"operator\">&gt;</span>  <span class=\"number\">60</span> )<span class=\"keyword\">as</span> r <span class=\"keyword\">on</span> </span><br><span class=\"line\">  student.sid <span class=\"operator\">=</span> r.sid; </span><br></pre></td></tr></table></figure>\n<p>3.查询在 SC 表存在成绩的学生信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">DISTINCT</span> student.<span class=\"operator\">*</span>#<span class=\"keyword\">DISTINCT</span>去重</span><br><span class=\"line\"><span class=\"keyword\">from</span> student,sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> student.SId<span class=\"operator\">=</span>sc.SId</span><br></pre></td></tr></table></figure>\n<p>4.查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.sid ,student.sname ,r.s1,r.s2  <span class=\"keyword\">from</span> student <span class=\"keyword\">join</span>  </span><br><span class=\"line\">(<span class=\"keyword\">select</span> sid,<span class=\"built_in\">count</span>(sid) <span class=\"keyword\">as</span> s1 ,<span class=\"built_in\">sum</span>(score)<span class=\"keyword\">as</span> s2 <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.sid ) <span class=\"keyword\">as</span> r  </span><br><span class=\"line\"><span class=\"keyword\">on</span>  student.sid  <span class=\"operator\">=</span> r.sid ;</span><br></pre></td></tr></table></figure>\n<p>5.查询「李」姓老师的数量</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(tid) <span class=\"keyword\">from</span> teacher <span class=\"keyword\">where</span> tname <span class=\"keyword\">like</span> &quot;李%&quot;;</span><br></pre></td></tr></table></figure>\n<p>6.查询学过「张三」老师授课的同学的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.<span class=\"operator\">*</span> ,s.CId <span class=\"keyword\">from</span> student,</span><br><span class=\"line\">(<span class=\"keyword\">select</span> sc.sid ,sc.cid <span class=\"keyword\">from</span> sc  <span class=\"keyword\">where</span>  sc.CId <span class=\"operator\">=</span> <span class=\"string\">&#x27;02&#x27;</span>  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.SId)<span class=\"keyword\">as</span> s </span><br><span class=\"line\"><span class=\"keyword\">where</span> student.sid <span class=\"operator\">=</span> s.sid;</span><br></pre></td></tr></table></figure>\n<p>7.查询有成绩学生且选课总数大于等于2的同学的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> STUDENT.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> STUDENT,</span><br><span class=\"line\">(<span class=\"keyword\">select</span> ID.SID <span class=\"keyword\">FROM</span>  (<span class=\"keyword\">SELECT</span> SC.SID, <span class=\"built_in\">count</span>(score) <span class=\"keyword\">as</span> total  <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.sid )<span class=\"keyword\">AS</span> ID ,</span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(course.cid) <span class=\"keyword\">as</span> tcid <span class=\"keyword\">from</span> course)  <span class=\"keyword\">as</span> t1 <span class=\"keyword\">WHERE</span> ID.TOTAL <span class=\"operator\">&lt;</span> T1.TCID)<span class=\"keyword\">AS</span> D <span class=\"keyword\">WHERE</span> STUDENT.SID <span class=\"operator\">=</span> D.SID;</span><br></pre></td></tr></table></figure>\n<p>8.查询至少有一门课与学号为&quot; 01 &quot;的同学所学相同的同学的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student </span><br><span class=\"line\"><span class=\"keyword\">where</span> student.sid <span class=\"keyword\">in</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> sc.sid <span class=\"keyword\">from</span> sc </span><br><span class=\"line\">    <span class=\"keyword\">where</span> sc.cid <span class=\"keyword\">in</span>(</span><br><span class=\"line\">        <span class=\"keyword\">select</span> sc.cid <span class=\"keyword\">from</span> sc </span><br><span class=\"line\">        <span class=\"keyword\">where</span> sc.sid <span class=\"operator\">=</span> <span class=\"string\">&#x27;01&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>9.查询没学过&quot;张三&quot;老师讲授的任一门课程的学生姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.sname <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> sid <span class=\"keyword\">not</span> <span class=\"keyword\">in</span>(</span><br><span class=\"line\"><span class=\"keyword\">select</span> sid  <span class=\"keyword\">from</span> sc ,</span><br><span class=\"line\">(<span class=\"keyword\">select</span> cid  <span class=\"keyword\">from</span> course ,</span><br><span class=\"line\">(<span class=\"keyword\">select</span> tid <span class=\"keyword\">from</span> teacher <span class=\"keyword\">where</span> tname <span class=\"operator\">=</span> <span class=\"string\">&#x27;张三&#x27;</span>) <span class=\"keyword\">as</span> id</span><br><span class=\"line\"><span class=\"keyword\">where</span> course.TId <span class=\"operator\">=</span> id.tid) <span class=\"keyword\">as</span> cid1 <span class=\"keyword\">where</span> sc.cid <span class=\"operator\">=</span> cid1.cid);</span><br></pre></td></tr></table></figure>\n<p>10.查询学生的总成绩，并进行排名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.sid,student.sname,r.s <span class=\"keyword\">from</span> student ,</span><br><span class=\"line\">(<span class=\"keyword\">select</span> sid,<span class=\"built_in\">sum</span>(score) <span class=\"keyword\">as</span> s  <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sid)  <span class=\"keyword\">as</span> r </span><br><span class=\"line\"><span class=\"keyword\">where</span> student.sid <span class=\"operator\">=</span> r.sid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> r.s <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<p>11.查询各科目优秀人数，分数在85分以上的人数为优秀</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> r.cid, r.cname, <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> r.score <span class=\"keyword\">when</span>  r.score <span class=\"operator\">&gt;=</span> <span class=\"number\">85</span> <span class=\"keyword\">and</span> r.score <span class=\"operator\">&lt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span> <span class=\"keyword\">end</span> )<span class=\"keyword\">as</span> &quot;优秀&quot;</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\"> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span>  <span class=\"keyword\">from</span> sc  <span class=\"keyword\">join</span> course</span><br><span class=\"line\"><span class=\"keyword\">on</span> sc.cid <span class=\"operator\">=</span> course.cid) <span class=\"keyword\">as</span> r <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> r.cid</span><br><span class=\"line\"> ;</span><br></pre></td></tr></table></figure>\n<p>12.查询语文成绩前三名</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.Sname, sc.sid ,sc.score <span class=\"keyword\">from</span> student ,sc,</span><br><span class=\"line\">(<span class=\"keyword\">select</span> cid <span class=\"keyword\">from</span> co <span class=\"keyword\">where</span> cname <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span>) <span class=\"keyword\">as</span> b </span><br><span class=\"line\"><span class=\"keyword\">where</span> (sc.cid <span class=\"operator\">=</span> b.cid <span class=\"keyword\">and</span> student.sid <span class=\"operator\">=</span> sc.sid) <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> score <span class=\"keyword\">desc</span> limit <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>13.查询各科成绩最高分、最低分和平均分：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">max</span>(score)<span class=\"keyword\">as</span> <span class=\"string\">&#x27;最高分&#x27;</span>,<span class=\"built_in\">min</span>(score) <span class=\"keyword\">as</span> <span class=\"string\">&#x27;最低分&#x27;</span>,<span class=\"built_in\">avg</span>(score) <span class=\"keyword\">as</span> <span class=\"string\">&#x27;平均分&#x27;</span> <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.cid;</span><br></pre></td></tr></table></figure>\n<p>14.查询每门课程被选修的学生数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sc.cid,<span class=\"built_in\">sum</span>(sc.sid) <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.CId ;</span><br></pre></td></tr></table></figure>\n<p>15.查询男生数、女生数量</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ssex ,<span class=\"built_in\">count</span>(sid) <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> ssex;</span><br></pre></td></tr></table></figure>\n<p>16.查询名字含有风的学生的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> sname  <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%风%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>17.查询同名学生数量</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> r.sname,r.num <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span>  student.<span class=\"operator\">*</span>,<span class=\"built_in\">count</span>(sname) <span class=\"keyword\">as</span> num  <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sname) <span class=\"keyword\">as</span> r</span><br><span class=\"line\"><span class=\"keyword\">where</span> r.num <span class=\"operator\">&gt;</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>17.嵌套查询列出同名的全部学生的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">in</span> (</span><br><span class=\"line\"><span class=\"keyword\">select</span> sname <span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sname</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>)<span class=\"operator\">&gt;</span><span class=\"number\">1</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>18.查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student .<span class=\"operator\">*</span>,r.avger <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span>   sid, <span class=\"built_in\">avg</span>(score)<span class=\"keyword\">as</span> avger  <span class=\"keyword\">from</span> sc <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sid)<span class=\"keyword\">as</span> r,student   </span><br><span class=\"line\"><span class=\"keyword\">where</span> student.sid <span class=\"operator\">=</span> r.sid <span class=\"keyword\">and</span> r.avger <span class=\"operator\">&gt;=</span> <span class=\"number\">85</span>;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">select</span> student.sid, student.sname, <span class=\"built_in\">AVG</span>(sc.score) <span class=\"keyword\">as</span> aver <span class=\"keyword\">from</span> student, sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> student.sid <span class=\"operator\">=</span> sc.sid</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.sid</span><br><span class=\"line\"><span class=\"keyword\">having</span> aver <span class=\"operator\">&gt;</span> <span class=\"number\">85</span>;</span><br></pre></td></tr></table></figure>\n<p>19.查询课程编号为 01 且课程成绩在 80 分及以上的学生的学号和姓名</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.sid,student.sname,r.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span>  sid ,score ,sc.cid <span class=\"keyword\">from</span> sc <span class=\"keyword\">where</span> sc.cid <span class=\"operator\">=</span> <span class=\"string\">&#x27;01&#x27;</span> <span class=\"keyword\">and</span> sc.score <span class=\"operator\">&gt;=</span> <span class=\"number\">80</span>)<span class=\"keyword\">as</span> r,student <span class=\"keyword\">where</span> student.sid <span class=\"operator\">=</span> r.sid;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">select</span> student.sid,student.sname ,sc.score</span><br><span class=\"line\"><span class=\"keyword\">from</span> student,sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> cid<span class=\"operator\">=</span>&quot;01&quot;</span><br><span class=\"line\"><span class=\"keyword\">and</span> score<span class=\"operator\">&gt;=</span><span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>20.查询同名学生名单，并统计同名人数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> b.<span class=\"operator\">*</span>,c.num <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> student.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">join</span> student <span class=\"keyword\">as</span> a <span class=\"keyword\">on</span></span><br><span class=\"line\"> student.sid <span class=\"operator\">!=</span> a.sid </span><br><span class=\"line\"> <span class=\"keyword\">and</span> student.sname <span class=\"operator\">=</span> a.sname)<span class=\"keyword\">as</span> b <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span>  student.sname,<span class=\"built_in\">count</span>(student.sname) <span class=\"keyword\">as</span> num <span class=\"keyword\">from</span> student <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\"> student.sname) <span class=\"keyword\">as</span> c <span class=\"keyword\">on</span> b.sname <span class=\"operator\">=</span> c.sname; </span><br></pre></td></tr></table></figure>\n<p>21.查询至少有一门课与学号为&quot; 01 &quot;的同学所学相同的同学的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> sc.sid <span class=\"keyword\">from</span> ((<span class=\"keyword\">select</span> sc.sid, sc.cid <span class=\"keyword\">from</span>  sc  <span class=\"keyword\">where</span> sc.SId <span class=\"operator\">=</span> <span class=\"string\">&#x27;01&#x27;</span>)<span class=\"keyword\">as</span> r  </span><br><span class=\"line\"><span class=\"keyword\">join</span> sc <span class=\"keyword\">on</span> sc.sid <span class=\"operator\">!=</span> r.sid <span class=\"keyword\">and</span> sc.CId <span class=\"keyword\">in</span>  (r.cid)))<span class=\"keyword\">as</span> a </span><br><span class=\"line\">,student  <span class=\"keyword\">where</span> student.sid <span class=\"operator\">=</span> a.sid <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  a.sid ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> student </span><br><span class=\"line\"> <span class=\"keyword\">where</span> student.sid <span class=\"keyword\">in</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> sc.sid <span class=\"keyword\">from</span> sc </span><br><span class=\"line\">    <span class=\"keyword\">where</span> sc.cid <span class=\"keyword\">in</span>(</span><br><span class=\"line\">        <span class=\"keyword\">select</span> sc.cid <span class=\"keyword\">from</span> sc </span><br><span class=\"line\">        <span class=\"keyword\">where</span> sc.sid <span class=\"operator\">=</span> <span class=\"string\">&#x27;01&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>22.查询每门功成绩最好的前两名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sc <span class=\"keyword\">as</span> t1</span><br><span class=\"line\"><span class=\"keyword\">where</span> (<span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">from</span> sc <span class=\"keyword\">as</span> t2 <span class=\"keyword\">where</span> t1.CId<span class=\"operator\">=</span>t2.CId <span class=\"keyword\">and</span> t2.score <span class=\"operator\">&gt;</span>t1.score)<span class=\"operator\">&lt;</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> t1.CId</span><br></pre></td></tr></table></figure>\n<p>23.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sc.sid,sc.cid,sc.score <span class=\"keyword\">from</span> sc ,sc <span class=\"keyword\">as</span> t <span class=\"keyword\">where</span> sc.sid <span class=\"operator\">=</span>  t.sid <span class=\"keyword\">and</span> t.CId <span class=\"operator\">!=</span> sc.CId <span class=\"keyword\">and</span> sc.score <span class=\"operator\">=</span> t.score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> sc.cid; </span><br></pre></td></tr></table></figure>\n<p>24.成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> student.<span class=\"operator\">*</span>,r.cid,r.score <span class=\"keyword\">from</span> student, (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span>  sc <span class=\"keyword\">where</span> sc.CId <span class=\"operator\">=</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span> co. cid <span class=\"keyword\">from</span>  co <span class=\"keyword\">where</span> co.TId <span class=\"operator\">=</span> (<span class=\"keyword\">select</span> teacher.tid <span class=\"keyword\">from</span> teacher  <span class=\"keyword\">where</span> teacher.Tname <span class=\"operator\">=</span> <span class=\"string\">&#x27;张三&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sc.score <span class=\"keyword\">desc</span> limit <span class=\"number\">1</span> )<span class=\"keyword\">as</span> r <span class=\"keyword\">where</span>  student.sid <span class=\"operator\">=</span> r.sid;</span><br></pre></td></tr></table></figure>\n<p>25.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> t1.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> sc <span class=\"keyword\">as</span> t1,sc <span class=\"keyword\">as</span> t2 <span class=\"keyword\">where</span> </span><br><span class=\"line\"> t1.SId<span class=\"operator\">=</span>t2.SId <span class=\"keyword\">and</span> t1.CId<span class=\"operator\">!=</span>t2.CId <span class=\"keyword\">and</span> t1.score <span class=\"operator\">=</span>t2.score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> t1.cid ;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","slug":"sql 50题练习","categories":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://example.com/tags/sql/"}]}]